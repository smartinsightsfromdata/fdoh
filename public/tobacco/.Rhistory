70 + 44 + 80 + 110 + 170 + 95 + 20 + 69 + 30
load("E:/fdoh/private/fluMist/vaers/adverse_events.RData")
ad <- v[which(v$STATE == "FL" & grepl("FLUMIST", v$VAX_NAME) &
v$AGE_YRS >=4 & v$AGE_YRS <= 18),]
save.image("adverse_events.RData")
names(ad)
head(ad)
ad$SYMTOM_TEXT
ad$SYMPTOM_TEXT
names(ad)
hist(ad$AGE_YRS)
summary(ad$DIED)
library(devtools)
install.packages("devtools")
library(devtools)
install.packages("httr")
library(httr)
install.packages("httr")
install.packages("devtools", dependencies = TRUE)
library(devtools)
install.packages("devtools", dependencies = TRUE)
install.packages("roxygen2")
install.packages("devtools", dependencies = TRUE)
library(devtools)
install.packages("httr")
install.packages("Rtools")
install.packages("Rtools")
install.packages("devtools", dependencies = TRUE)
library(devtools)
library(devtools)
library(Rtools)
library(devtools)
install.packages("devtools", dependencies = TRUE)
install.packages("devtools")
library(devtools)
install.packages("httr")
install.packages("httr", dependencies = TRUE)
install.packages("devtools")
library(devtools)
update.packages("devtools")
library(devtools)
library(plyr)
install.packages("plyr")
install.packages("devtools")
packageVersion("devtools")
sessionInfo()
library(devtools)
install_github("joebrew/rpackages", subdir = "cdph")
bcol <- adjustcolor("darkgreen", alpha.f=0.4)
ycol <- adjustcolor("darkblue", alpha.f=0.4)
x <- (1:1000)^(1/2)
y <- (1:1000)^3
plot(x,y, type = "n",
xlab = "Time",
ylab = "Value",
xaxt = "n",
yaxt = "n")
b <- rev(y)
plot(x,y, type = "n",
xlab = "Time",
ylab = "Value",
xaxt = "n",
yaxt = "n")
lines(x,b, col = bcol, lwd = 5)
text(x[100], b[100],
labels = "Risk of infection",
col = bcol)
lines(x,y, col = ycol, lwd =5)
text(x[800], y[800],
labels = "Likelihood of hesitancy",
col = ycol)
x <- sample(1:1000, 1000)
y <- sample(1:1000, 1000)
mycol <- sample(c(rep("blue", 19), "red"), 1000, replace = TRUE)
mycol <- adjustcolor(mycol, alpha.f=0.6)
plot(x,y, col = mycol, pch = 16, cex =2,
xaxt = "n", xlab = NA, yaxt = "n", ylab = NA)
plot(x,y, col = mycol, pch = 16, cex =2,
xaxt = "n", xlab = NA, yaxt = "n", ylab = NA)
##################################
library(RODBC) # Read in the
install.packages("RODBC")
bm <- odbcConnect("vw_BirthMaster", uid="BrewJR", pwd="stopFlu2013")
library(RODBC) # Read in the
bm <- odbcConnect("vw_BirthMaster", uid="BrewJR", pwd="stopFlu2013")
bm <- odbcConnect("HMS01 Shadow", uid="BrewJR", pwd="Colometa08")
bm <- odbcConnect("HMS01 Shadow")
x <- c("25 (%)", "35(%)")
gsub(["(%)"], "", x)
gsub("[(%)]", "", x)
ls()
dir()
stem(1:10)
stem(seq(1,10,by=0.05))
library(gdata)
install.packages("weatherData")
library(weatherData)
# Get weather for just one day
getWeatherForDate("GNV", "2014-04-14")
# Get weather for a period of time
start <- as.Date("2014-01-01", format = "%Y-%m-%d") # define jan 1 2014 as start
x <- getSummarizedWeather("GNV", start_date = start,
end_date = Sys.Date() - 1,
opt_custom_columns = TRUE,
custom_columns = c(2,4,20))
# Glimpse at your data
head(x)
# Plot rainfall
plot(x$Date, as.numeric(x$PrecipitationIn),
cex = as.numeric(x$PrecipitationIn),
col = adjustcolor("red", alpha.f=0.4),
pch = 16)
lines(x$Date, as.numeric(x$PrecipitationIn),
col = adjustcolor("black", alpha.f = 0.4))
# Plot max temperature
plot(x$Date, x$Max_TemperatureF,
col = adjustcolor("darkred", alpha.f = 0.3),
pch = 16)
# Add min temperature
points(x$Date, x$Min_TemperatureF,
col = adjustcolor("darkblue", alpha.f = 0.3),
pch = 16,
add = T)
library(Hmisc)
library(RColorBrewer)
library(car)
# Set wd
setwd("C:/Users/BrewJR/Documents/fdoh/public/tobacco")
# Read in data
comb <- read.csv("comb1.csv", stringsAsFactors = FALSE)
# Recode all 77, 88, 99
for (i in 1:ncol(comb)){
var <-  comb[,i]
var[which(var %in% c(77,88,99))] <- NA
var[which(var %in% c("77", "88", "99"))] <- NA
comb[,i] <- var
}
# Selectively recode
yesnos <- c(7,8, 12:31, 33:35)
for (i in yesnos){
comb[,i] <- Recode(comb[,i],
"1 = 'Yes';
2 = 'No'")
}
# Size category
comb[,5] <- Recode(comb[,5],
"1 = 'Small';
2 = 'Large'")
# Type of insurance coverage
comb[,9] <- Recode(comb[,9],
"1 = 'Self';
2 = 'Fully';
0 = NA;
' ' = NA;
'' = NA;
'1- ' = NA;
'1-' = 'Self';
'2l' = 'Fully'")
# Employer sector
comb[,11] <- Recode(comb[,11],
"1 = 'Government';
2 = 'Healthcare';
3 = 'Business';
4 = 'County School District';
5 = 'City Municipality';
6 = 'County Municipality'")
# Extent of TFG policy coverage
comb[,32] <- Recode(comb[,32], "
1 = '100% SFG';
2 = '100% TFG';
3 = 'SFIW';
4 = 'SFIWO'")
# Insurance carrier
comb[,10] <- Recode(comb[,10],
"'1' = 'UHC';
'2' = 'Aetna';
'3' = 'Avmed';
'4' = 'BCBS';
'5' = 'Capital';
'6' = 'Florida Blue';
'7' = 'Cigna';
'8' = 'Health First';
'9' = 'Humana';
'10' = 'Self-insured';
'11' = 'Other';
'12' = 'Combination'")
# Read in names of questions
comb_names <- read.csv("comb1.csv", header = FALSE)
comb_names <- comb_names[1,]
###################
# SIMPASYM FUNCTION FOR CALCULATIN C.I. OF PROPORTIONS
###################
simpasym <- function(n, p, z=1.96, cc=TRUE){
out <- list()
if(cc){
out$lb <- p - z*sqrt((p*(1-p))/n) - 0.5/n
out$ub <- p + z*sqrt((p*(1-p))/n) + 0.5/n
} else {
out$lb <- p - z*sqrt((p*(1-p))/n)
out$ub <- p + z*sqrt((p*(1-p))/n)
}
out
}
###################
# WRITE FUNCTION FOR PLOTTING BARS
###################
BarFun <- function(var, by_var = NULL, recode_var = NULL, ref = NULL,
cex.names = 1, las = 1){
var <- comb[,"Insurance.Carrier"]
by_var = comb[,5]
ref <- NULL
recode_var <- NULL
cex.names = 1
las = 1
# Ensure it's treated as a character
var <- as.character(var)
# Make var a factor and relevel so "unknown" comes first
var <- factor(var)
if(!is.null(by_var)){by_var <- factor(by_var)}
if(is.null(ref)){
var <- var
} else {
var <- relevel(var, ref = ref)
}
# Make a table
if(is.null(by_var)){
var_table <- table(var)
var_names <- names(var_table)
var_vals <- as.numeric(var_table)
var_prop <- prop.table(var_table) * 100
# Calculate confidence intervals
ci <- simpasym(n=sum(var_table),
p=var_prop / 100,
z=1.96, cc=TRUE)
lb <- ci$lb * sum(var_table)
ub <- ci$ub * sum(var_table)
} else {
var_table <- table(var, by_var)
var_names <- levels(var)
var_vals <- matrix(var_table, ncol = length(levels(by_var)))
var_prop <- prop.table(var_table, 1) * 100
# Calculate confidence intervals
ci <- simpasym(n= rep(apply(var_table, 1, sum),2), #sum(var_table),
p=var_prop / 100,
z=1.96, cc=TRUE)
lb <- ci$lb * rep(apply(var_table, 1, sum),2) #var_table#sum(var_table)
ub <- ci$ub * rep(apply(var_table, 1, sum),2)#var_table#sum(var_table)
}
# Assing positions based on relative value compared to others
var_pos <- ifelse(var_prop < 0.5 * max(var_prop),
3, 1)
# Create color vector (first is always red if there are unknowns)
#   if( var_table["Unknown"] > 0 ){
#     my_colors <- c("Red", colorRampPalette(c("darkblue", "darkgreen"))(length(levels(var)) -1))
#   } else {
my_colors <- colorRampPalette(c("darkblue", "darkgreen"))(length(levels(var)))
#   }
my_colors <- adjustcolor(my_colors, alpha.f = 0.6)
# Make barplot
if(is.null(by_var)){
bp <- barplot(var_table,
ylim = c(0, max(ub)*1.2),
col = my_colors,
border = "darkgrey",
ylab = "Number of employers",
cex.names = cex.names,
las = las,
beside = TRUE)
# Add point estimate text
#   text(x = bp[,1],
#        y = var_vals,
#        labels = paste0(round(var_prop, digits = 1), "%"),
#        pos = var_pos)
# Add error bars
errbar(x=bp[,1],
y=var_table,
yplus=ub,
yminus=lb,
add=TRUE,
type="n",
errbar.col=adjustcolor("darkred", alpha.f=0.6),
lwd=2)
# Add text of point estimate with c.i.'s
text(x=bp[,1],
y= ifelse(var_pos == 1,
var_table - (.1*max(var_table)),
var_table + (.1*max(var_table))),
labels=paste0(" ", round(var_prop, digits=1),
"%",
"\n(",
round(ci$lb*100, digits=1),
"%",
"-",
round(ci$ub*100, digits=1),
"%",
")"
),
cex=2/length(var_table),
col=adjustcolor("black", alpha.f=0.7))
abline(h = 0)
} else{
bp <- barplot(var_table,
ylim = c(0, max(ub)*1.2),
col = my_colors,
border = "darkgrey",
ylab = "Number of employers",
cex.names = cex.names,
las = las,
beside = TRUE)
# Add error bars
errbar(x=bp,
y=var_table,
yplus=ub,
yminus=lb,
add=TRUE,
type="n",
errbar.col=adjustcolor("darkred", alpha.f=0.6),
lwd=2)
# Add text of point estimate with c.i.'s
text(x=bp,
y= ifelse(var_pos == 1,
var_table - (.1*max(var_table)),
var_table + (.1*max(var_table))),
labels=paste0(" ", round(var_prop, digits=1),
"%",
"\n(",
round(ci$lb*100, digits=1),
"%",
"-",
round(ci$ub*100, digits=1),
"%",
")"
),
cex=2/length(var_table),
col=adjustcolor("black", alpha.f=0.7))
abline(h = 0)
}
}
BarFun(com[,5], by_var = comb[,8])
BarFun(comb[,"Insurance.Carrier"], by_var = comb[,8])
###################
# WRITE FUNCTION FOR PLOTTING BARS
###################
BarFun <- function(var, by_var = NULL, recode_var = NULL, ref = NULL,
cex.names = 1, las = 1, legend = FALSE, rain = FALSE){
var <- comb[,"Insurance.Carrier"]
by_var = comb[,5]
ref <- NULL
recode_var <- NULL
cex.names = 1
las = 1
# Ensure it's treated as a character
var <- as.character(var)
# Make var a factor and relevel so "unknown" comes first
var <- factor(var)
if(!is.null(by_var)){by_var <- factor(by_var)}
if(is.null(ref)){
var <- var
} else {
var <- relevel(var, ref = ref)
}
# Make a table
if(is.null(by_var)){
var_table <- table(var)
var_names <- names(var_table)
var_vals <- as.numeric(var_table)
var_prop <- prop.table(var_table) * 100
# Calculate confidence intervals
ci <- simpasym(n=sum(var_table),
p=var_prop / 100,
z=1.96, cc=TRUE)
lb <- ci$lb * sum(var_table)
ub <- ci$ub * sum(var_table)
} else {
var_table <- table(var, by_var)
var_names <- levels(var)
var_vals <- matrix(var_table, ncol = length(levels(by_var)))
var_prop <- prop.table(var_table, 1) * 100
# Calculate confidence intervals
ci <- simpasym(n= rep(apply(var_table, 1, sum),2), #sum(var_table),
p=var_prop / 100,
z=1.96, cc=TRUE)
lb <- ci$lb * rep(apply(var_table, 1, sum),2) #var_table#sum(var_table)
ub <- ci$ub * rep(apply(var_table, 1, sum),2)#var_table#sum(var_table)
}
# Assing positions based on relative value compared to others
var_pos <- ifelse(var_prop < 0.5 * max(var_prop),
3, 1)
# Create color vector (first is always red if there are unknowns)
#   if( var_table["Unknown"] > 0 ){
#     my_colors <- c("Red", colorRampPalette(c("darkblue", "darkgreen"))(length(levels(var)) -1))
#   } else {
my_colors <- colorRampPalette(c("darkblue", "darkgreen"))(length(levels(var)))
#   }
if(rain){
my_colors <- rainbow(length(levels(var)))
}
my_colors <- adjustcolor(my_colors, alpha.f = 0.6)
# Make barplot
if(is.null(by_var)){
bp <- barplot(var_table,
ylim = c(0, max(ub)*1.2),
col = my_colors,
border = "darkgrey",
ylab = "Number of employers",
cex.names = cex.names,
las = las,
beside = TRUE)
# Add point estimate text
#   text(x = bp[,1],
#        y = var_vals,
#        labels = paste0(round(var_prop, digits = 1), "%"),
#        pos = var_pos)
# Add error bars
errbar(x=bp[,1],
y=var_table,
yplus=ub,
yminus=lb,
add=TRUE,
type="n",
errbar.col=adjustcolor("darkred", alpha.f=0.6),
lwd=2)
# Add text of point estimate with c.i.'s
text(x=bp[,1],
y= ifelse(var_pos == 1,
var_table - (.1*max(var_table)),
var_table + (.1*max(var_table))),
labels=paste0(" ", round(var_prop, digits=1),
"%",
"\n(",
round(ci$lb*100, digits=1),
"%",
"-",
round(ci$ub*100, digits=1),
"%",
")"
),
cex=2/length(var_table),
col=adjustcolor("black", alpha.f=0.7))
abline(h = 0)
} else{
bp <- barplot(var_table,
ylim = c(0, max(ub)*1.2),
col = my_colors,
border = "darkgrey",
ylab = "Number of employers",
cex.names = cex.names,
las = las,
beside = TRUE,
legend = legend)
# Add error bars
errbar(x=bp,
y=var_table,
yplus=ub,
yminus=lb,
add=TRUE,
type="n",
errbar.col=adjustcolor("darkred", alpha.f=0.6),
lwd=2)
# Add text of point estimate with c.i.'s
text(x=bp,
y= ifelse(var_pos == 1,
var_table - (.1*max(var_table)),
var_table + (.1*max(var_table))),
labels=paste0(" ", round(var_prop, digits=1),
"%",
"\n(",
round(ci$lb*100, digits=1),
"%",
"-",
round(ci$ub*100, digits=1),
"%",
")"
),
cex=2/length(var_table),
col=adjustcolor("black", alpha.f=0.7))
abline(h = 0)
}
}
BarFun(comb[,"Insurance.Carrier"], by_var = comb[,8])
BarFun(comb[,"Insurance.Carrier"], by_var = comb[,8], rain = TRUE)
BarFun(comb[,"Insurance.Carrier"], by_var = comb[,8], rain = TRUE, legend = TRUE)
