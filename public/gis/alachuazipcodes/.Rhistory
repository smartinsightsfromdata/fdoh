y = c(y.start - 0.5, 6.5), default.units = "native",
gp=gpar(col = "black", lwd = 1.75))
if (y.end < 6  ) {
grid.lines(x = c(x.start + 1, x.finis + 1),
y = c(-0.5, -0.5), default.units = "native",
gp=gpar(col = "black", lwd = 1.75))
grid.lines(x = c(x.start, x.finis),
y = c(6.5, 6.5), default.units = "native",
gp=gpar(col = "black", lwd = 1.75))
} else {
grid.lines(x = c(x.start + 1, x.finis),
y = c(-0.5, -0.5), default.units = "native",
gp=gpar(col = "black", lwd = 1.75))
grid.lines(x = c(x.start, x.finis),
y = c(6.5, 6.5), default.units = "native",
gp=gpar(col = "black", lwd = 1.75))
}
} else {
grid.lines(x = c(x.start, x.start),
y = c( - 0.5, 6.5), default.units = "native",
gp=gpar(col = "black", lwd = 1.75))
}
if (y.start == 0 ) {
if (y.end < 6  ) {
grid.lines(x = c(x.start, x.finis + 1),
y = c(-0.5, -0.5), default.units = "native",
gp=gpar(col = "black", lwd = 1.75))
grid.lines(x = c(x.start, x.finis),
y = c(6.5, 6.5), default.units = "native",
gp=gpar(col = "black", lwd = 1.75))
} else {
grid.lines(x = c(x.start + 1, x.finis),
y = c(-0.5, -0.5), default.units = "native",
gp=gpar(col = "black", lwd = 1.75))
grid.lines(x = c(x.start, x.finis),
y = c(6.5, 6.5), default.units = "native",
gp=gpar(col = "black", lwd = 1.75))
}
}
for (j in 1:12)  {
last.month <- max(dates.fsubs$seq[dates.fsubs$month == j])
x.last.m <- dates.fsubs$woty[last.month] + 0.5
y.last.m <- dates.fsubs$dotw[last.month] + 0.5
grid.lines(x = c(x.last.m, x.last.m), y = c(-0.5, y.last.m),
default.units = "native", gp=gpar(col = "black", lwd = 1.75))
if ((y.last.m) < 6) {
grid.lines(x = c(x.last.m, x.last.m - 1), y = c(y.last.m, y.last.m),
default.units = "native", gp=gpar(col = "black", lwd = 1.75))
grid.lines(x = c(x.last.m - 1, x.last.m - 1), y = c(y.last.m, 6.5),
default.units = "native", gp=gpar(col = "black", lwd = 1.75))
} else {
grid.lines(x = c(x.last.m, x.last.m), y = c(- 0.5, 6.5),
default.units = "native", gp=gpar(col = "black", lwd = 1.75))
}
}
}
}
trellis.unfocus()
}
lattice.options(default.theme = def.theme)
}
###################
# BASELINES AND MATH
###################
blgi <- nrow(gibl)/30
blili <- nrow(ilibl)/30
blneuro <- nrow(neurobl)/30
blrash <- nrow(rashbl)/30
blresp <- nrow(respbl)/30
#CREATE 5% AND 95% RANGES
blgiq <- quantile(dist$gi, c(.05, .95), na.rm=T)
bliliq <- quantile(dist$ili, c(.05, .95), na.rm=T)
blneuroq <- quantile(dist$neuro, c(.05, .95), na.rm=T)
blrashq <- quantile(dist$rash, c(.05, .95), na.rm=T)
blrespq <- quantile(dist$resp, c(.05, .95), na.rm=T)
###################
#WEEKLY AND DAILY BARPLOT
###################
weeklysums <- c(
(sum(overall$gi)/blgi/7)*100,
(sum(overall$ili)/blili/7)*100,
(sum(overall$neuro)/blneuro/7)*100,
(sum(overall$rash)/blrash/7)*100,
(sum(overall$resp)/blresp/7)*100)
weeklysums <-round(weeklysums, digits=1)
dailysums <- c(
(overall$gi[1]/blgi)*100,
(overall$ili[1]/blili)*100,
(overall$neuro[1]/blneuro)*100,
(overall$rash[1]/blrash)*100,
(overall$resp[1]/blresp)*100)
dailysums <-round(dailysums, digits=1)
###################
#GEOGRAPHICAL FLAG
###################
zip.map$zipcode <- zip.map$ZIP
detectpercent <- 1
detectabsolute <- 3
joebot <- "****Potential geographical clusters detected: "
joebotno <- " "
### Set conditions
joebotgi <- zip.map$zipcode[which(zip.map$giprop > detectpercent &
zip.map$gi >= detectabsolute)]
joebotili <- zip.map$zipcode[which(zip.map$iliprop > detectpercent &
zip.map$ili >= detectabsolute)]
joebotneuro <- zip.map$zipcode[which(zip.map$neuroprop > detectpercent &
zip.map$neuro >= detectabsolute)]
joebotrash <- zip.map$zipcode[which(zip.map$rashprop > detectpercent &
zip.map$rash >= detectabsolute)]
joebotresp <- zip.map$zipcode[which(zip.map$respprop > detectpercent &
zip.map$resp >= detectabsolute)]
#Print detections
#gi
ifelse(length(joebotgi)>0,
paste(c(joebot, paste(joebotgi, collapse=", ")), collapse=" "),
paste(joebotno))
#ili
ifelse(length(joebotili)>0,
paste(c(joebot, paste(joebotili, collapse=", ")), collapse=" "),
paste(joebotno))
#neuro
ifelse(length(joebotneuro)>0,
paste(c(joebot, paste(joebotneuro, collapse=", ")), collapse=" "),
paste(joebotno))
#rash
ifelse(length(joebotrash)>0,
paste(c(joebot, paste(joebotrash, collapse=", ")), collapse=" "),
paste(joebotno))
#resp
ifelse(length(joebotresp)>0,
paste(c(joebot, paste(joebotresp, collapse=", ")), collapse=" "),
paste(joebotno))
#MAKE CHARACTER STATEMENTS FOR EXPECTED VS. OBSERVED
abnormal <- "ED visits above expected levels for:"
normal <- "ED visits below expected levels for:"
abnormalsym <- ""
normalsym <- ""
ifelse(nrow(giyest)>(blgi),
abnormalsym <- paste(c(abnormalsym,"GI")),
normalsym <- paste(c(normalsym,"GI")))
ifelse(nrow(iliyest)>(blili),
abnormalsym <- paste(c(abnormalsym,"ILI")),
normalsym <- paste(c(normalsym,"ILI")))
ifelse(nrow(neuroyest)>(blneuro),
abnormalsym <- paste(c(abnormalsym,"Neurological")),
normalsym <- paste(c(normalsym,"Neurological")))
ifelse(nrow(rashyest)>(blrash),
abnormalsym <- paste(c(abnormalsym,"Rash")),
normalsym <- paste(c(normalsym,"Rash")))
ifelse(nrow(respyest)>(blresp),
abnormalsym <- paste(c(abnormalsym,"Respiratory")),
normalsym <- paste(c(normalsym,"Respiratory")))
abnormalsym <- abnormalsym[-1]
normalsym <- normalsym[-1]
abnormalsym <- paste(abnormalsym, collapse=", ")
normalsym <- paste(normalsym, collapse=", ")
abnormal <- paste(c(abnormal, abnormalsym), collapse=" ")
normal <- paste(c(normal, normalsym), collapse=" ")
abnormal
normal
### NOW MAKE CHARACTER STATEMENTS ABOUT EXPECTED VS. OBSERVED FOR WEEKLY FIGURES
abnormalweek <- "ED visits above expected levels for:"
normalweek <- "ED visits below expected levels for:"
abnormalweeksym <- ""
normalweeksym <- ""
ifelse(sum(overall$gi)>(blgi*7),
abnormalweeksym <- paste(c(abnormalweeksym,"GI")),
normalweeksym <- paste(c(normalweeksym,"GI")))
ifelse(sum(overall$ili)>(blili*7),
abnormalweeksym <- paste(c(abnormalweeksym, "ILI")),
normalweeksym <- paste(c(normalweeksym, "ILI")))
ifelse(sum(overall$neuro)>(blneuro*7),
abnormalweeksym <- paste(c(abnormalweeksym, "Neurological")),
normalweeksym <- paste(c(normalweeksym, "Neurological")))
ifelse(sum(overall$rash)>(blrash*7),
abnormalweeksym <- paste(c(abnormalweeksym, "Rash")),
normalweeksym <- paste(c(normalweeksym, "Rash")))
ifelse(sum(overall$resp)>(blresp*7),
abnormalweeksym <- paste(c(abnormalweeksym, "Respiratory")),
normalweeksym <- paste(c(normalweeksym, "Respiratory")))
abnormalweeksym <- abnormalweeksym[-1]
normalweeksym <- normalweeksym[-1]
abnormalweeksym <- paste(abnormalweeksym, collapse=", ")
normalweeksym <- paste(normalweeksym, collapse=", ")
abnormalweek <- paste(c(abnormalweek, abnormalweeksym), collapse=" ")
normalweek <- paste(c(normalweek, normalweeksym), collapse=" ")
abnormalweek
normalweek
###################
#RECORD OF INTEREST TABLES
###################
roc <- recordsofinterest[c(1,2,3,4,5,8,16, 75)]
roc$HospitalName <- substr(as.character(roc$HospitalName), 1, 8)
roc$Date <- as.character(roc$Date)
###################
#MAP PARAMETERS
###################
joewatercolor <- openmap(c(29.96, -82.7), c(29.35,-81.9),
type="stamen-watercolor")
joemapwatercolor <- openproj(joewatercolor, projection = "+proj=longlat")
###################
#WORD CLOUD
###################
remove <- "[|]|(|)|/|;|:|[(*]|&|-[)]|[(]|[-]|[--])"
myWords <- unlist(strsplit(as.character(gsub(remove,"",
toupper(alless$CCDD[which(alless$Date == yesterday)]))), " "))
myWordsBL <- unlist(strsplit(as.character(gsub(remove,"",
toupper(allessbl$CCDD))), " "))
myWordsTable <- table(myWords)
myWordsBLTable <- table(myWordsBL)
myWordsDF <- as.data.frame(table(myWords))
colnames(myWordsDF) <- c("word","count")
myWordsBLDF <- as.data.frame(table(myWordsBL))
colnames(myWordsBLDF) <- c("word","count")
combinedDF <- rbind(myWordsDF, myWordsBLDF)
combinedWords <- c(myWords, myWordsBL)
myCloud <- as.data.frame(as.character(unique(sort(combinedWords))))
colnames(myCloud) <- "word"
myCloud$recent <- 0
for (i in myCloud$word){
myCloud$recent[which(myCloud$word == i)] <-
sum(myWordsDF$count[which(myWordsDF$word == i)])}
myCloud$bl <- 0
for (i in myCloud$word){
myCloud$bl[which(myCloud$word == i)] <-
sum(myWordsBLDF$count[which(myWordsBLDF$word == i)])/
length(unique(sort(allessbl$Date)))}
myCloud$prop <- 1+ ((myCloud$recent+0.9) / (myCloud$bl+0.9))
myCloud$color <- ifelse(myCloud$recent <1,
"grey",
"black")
myCloud <- myCloud[which(myCloud$recent >0),]
myCloud <- myCloud[order(myCloud$prop),]
myCloud$word <- as.character(myCloud$word)
myCloud <- myCloud[which(nchar(myCloud$word) > 1),]
myCloud$recentCubicRoot <- myCloud$recent^(1/3)
myCloud$colorCat<- cut(myCloud$recentCubicRoot, 9, labels=FALSE)
cloudColors <- colorRampPalette(brewer.pal(9, "Blues"))(11)
cloudColors <- rev(cloudColors[1:11])
myCloud$color <- cloudColors[myCloud$colorCat]
myCloud <- myCloud[which(regexpr("AND|WITHOUT|NOT|OF|LIKE|THERAPY|UNSPECIFIED|OR|IN", myCloud$word) <1),]
wordcloud(words=myCloud$word,
freq=myCloud$prop^4,
scale=c(2,0.00001),
max.words=Inf,
random.order=FALSE,
rot.per=0,
colors=myCloud$color[order(myCloud$prop^4)],
ordered.colors=FALSE)
###################
#FLAG TABLE
###################
#FUNCTION TO CONVERT TEXT TO REGEXPR SEARCH TERM
regexFun <- function(x){
paste(substr(x,1,5),"*","|",
tolower(substr(x,1,5)),"*|",
capwords(tolower(substr(x, 1,5))),"*",sep="", collapse=NULL)}
wordsOfInterest <- as.data.frame(myCloud[which(ifelse(myCloud$bl <=0,
myCloud$recent >= 3,
myCloud$recent > 3*(myCloud$bl)) &
myCloud$recent >= 3),])
wordsOfInterest <- wordsOfInterest[order(wordsOfInterest$recent,
decreasing=TRUE),]
flag <- as.data.frame(cbind(wordsOfInterest$word,
wordsOfInterest$recent,
round(wordsOfInterest$bl, digits=2)))
colnames(flag) <- c("Word", "Yesterday", "Baseline")
flag$Baseline <- as.numeric(as.character(flag$Baseline))
#CAPITALIZE FIRST LETTER FUNCTION
capwords <- function(s, strict = FALSE) {
cap <- function(s) paste(toupper(substring(s, 1, 1)),
{s <- substring(s, 2); if(strict) tolower(s) else s},
sep = "", collapse = " " )
sapply(strsplit(s, split = " "), cap, USE.NAMES = !is.null(names(s)))}
#CREATE SEARCH TERMS
heat30 <- heat[which(heat$date > max(heat$date)-30),]
flagSearch <- as.data.frame(matrix(rep(NA, length(flag$Word)*30), nrow=30))
colnames(flagSearch) <-flag$Word
flagSearch <- cbind(heat30$date, flagSearch)
colnames(flagSearch)[1] <- "date"
newColStart <- length(colnames(heat30))+1
newColEnd <- length(colnames(heat30))+length(flagSearch$Word)
#colnames(heat30)[newColStart:newColEnd] <-  flagSearch$Word
for(i in flagSearch$date){
for (j in colnames(flagSearch[2:(length(flag$Word)+1)])){
flagSearch[which(flagSearch$date == i),j] <-
nrow(alless1213[which(alless1213$Date == i &
regexpr(regexFun(j), alless1213$CCDD)>=0),])}}
par(mar=c(2,2,2,1))
par(mfrow=c(ceiling(length(flag$Word)/3),3))
for (i in colnames(flagSearch[2:(length(flag$Word)+1)])){
plot(flagSearch$date, flagSearch[,i], main=i, xlab="Date", ylab="Cases", lty=6,
lwd=1, col=adjustcolor("red", alpha.f=0.6), type="l", xaxt="n")
points(flagSearch$date, flagSearch[,i], pch=16, cex=1, col=adjustcolor("black", alpha.f=0.4))
axis(side=1, at=flagSearch$date, labels=format(flagSearch$date, format="%d %b"), las=3, cex.axis=0.4)
abline(h=flag$Baseline[which(flag$Word == i)], lwd=3, col=adjustcolor("blue", alpha.f=0.2))
legend(x="topleft", bty="n", border=FALSE, cex=0.6, lwd=3, col=adjustcolor("blue", alpha.f=0.2),
legend="2012 seasonal baseline")}
par(mfrow=c(1,1))
###################
#ILI YEAR TO YEAR COMPARISON
###################
heat$j <- as.numeric(format(heat$date, format="%j"))
#2013
ili13= spm(heat$ili[which(heat$date >= "2013-01-01")]~
f(heat$j[which(heat$date >= "2013-01-01")], spar=20), omit.missing=TRUE)
#2012
ili12= spm(heat$ili[which(heat$date < "2013-01-01" &
heat$date >= "2012-01-01")]~
f(heat$j[which(heat$date < "2013-01-01" &
heat$date >= "2012-01-01")], spar=20), omit.missing=TRUE)
plot(heat$j, heat$ili, type="n", main="ILI: 2012 vs. 2013",
xlab="Date", ylab="Daily cases", xlim=c(250,365))
points(heat$j[which(heat$date < "2013-01-01")],
heat$ili[which(heat$date < "2013-01-01")],
pch=16, col=adjustcolor("dodgerblue3", alpha.f=0.3))
points(heat$j[which(heat$date > "2013-01-01")],
heat$ili[which(heat$date > "2013-01-01")],
pch=16, col=adjustcolor("darkred", alpha.f=0.3))
lines(ili12,shade.col=adjustcolor("dodgerblue3", alpha.f=0.3),
rug.col="blue", col="blue")
lines(ili13,shade.col=adjustcolor("darkred", alpha.f=0.3),
rug.col="darkred", col="darkred")
legend(x="topleft", pch=16, col=c("dodgerblue2", "darkred"),
legend=c("2012", "2013"), lwd=2)
###################
#
###################
###################
#
###################
jj <- map("county", "florida")
plot(jj, type="l")
###################
# FUNCTION TIME!!!!
###################
#### MapCases
MapCases <- function(variable, color){
plotvar <- variable
nclr <- max(plotvar+1, na.rm=TRUE) # number of bins
plotclr <- c("white", brewer.pal(nclr, color))
cuts <- cut(plotvar, breaks=nclr,labels=FALSE)
mapCols <- plotclr[cuts]
plot(zip.map, border="grey", col=mapCols, main="Cases yesterday")
legend("bottomleft", # position
legend = seq(0,max(plotvar, na.rm=TRUE), 1),
title = "Cases yesterday",
fill = plotclr,
cex = 1 - (0.03*max(plotvar, na.rm=TRUE)),
bty = "n",
border="grey") # border
}
#MapProp
MapProp <- function(variable, color){
plotvar <- variable
nclr <- 4# number of bins
plotcat <- ifelse(variable==0, 0,
ifelse(variable >0 & variable <1, 1,
ifelse(variable==1, 2,
ifelse(variable>1 & variable <=2, 3,
ifelse(variable>2, 4,
0)))))
plotclr <- c("white", brewer.pal(max(plotcat, na.rm=TRUE), color))
cuts <- cut(plotvar, breaks=nclr,labels=FALSE)
mapCols <- plotclr[cuts]
legText <- as.character(100*seq(0,max(plotcat, na.rm=TRUE), 1))
legText <- c("0",
"< 100",
"100",
"101 - 200",
"> 200")
plot(zip.map, border="grey", col=mapCols, main="Yesterday relative to baseline")
legend("bottomleft", # position
legend = legText,
title = "Cases\n(% of expected)",
fill = plotclr,
cex = 0.56,
bty = "n",
border="grey") # border
}
############ DETAILS
par(mfrow=c(1,1))
HistFun <- function(variable, color){
hist(variable, breaks=15, col=adjustcolor("black", alpha.f=0.5),
main="Cases", cex.lab=0.6, cex.main=0.8,
xlab="Baseline daily cases",
ylab="Frequency", border=FALSE)
abline(v=overall$gi[which(overall$date == yesterday)], lwd=14, lty=1,
col=adjustcolor(color, alpha.f=0.5))
legend(x="topright",
lty=1, lwd=3, legend="Yesterday's\nobservation", cex=0.5,
col=adjustcolor(color, alpha.f=0.5),bty="n")
}
AgeHistFun <- function(variable, baseline, color){
hist(baseline, main="Age", cex.main=0.8, col=adjustcolor("black", alpha.f=0.5), border=FALSE,
ylab="Frequency", xlab="Age", freq=FALSE, cex.lab=0.6)
hist(variable,
col=adjustcolor(color, alpha.f=0.4), ylab="frequency", xlab="age", freq=FALSE, add=TRUE,
border=FALSE)
legend(x="topright", fill=adjustcolor(c("black", color), alpha.f=0.5), bty="n", border=FALSE,
legend=c("2012 baseline", "Yesterday"), cex=0.6)
}
TimeHistFun <- function(variable, baseline, color){
hist(baseline, freq=FALSE, border=FALSE, col=adjustcolor("black", alpha.f=0.5),
main="Check-in time", xlab="Time of day", ylab="Frequency", xaxt="n", ylim=c(0,0.06), cex=0.6, cex.main=0.8,
cex.lab=0.6)
hist(variable, freq=FALSE, border=FALSE,
col=adjustcolor(color, alpha.f=0.5), xaxt="n", add=TRUE, ylim=c(0,0.06))
axis(1, at=c(1,12,24,36,50), labels=c("midnight","6am","noon","6pm","midnight"), cex.axis=0.6)
legend(x="topright", fill=adjustcolor(c("black", color), alpha.f=0.5), bty="n", border=FALSE,
legend=c("2012 baseline", "Yesterday"), cex=0.6)
}
SexFun <- function(variable, baseline, color){
prop <- table(baseline)/length(baseline)
barplot(prop, ylim=c(0,1), col=adjustcolor("black",alpha.f=0.5), border=FALSE)
prop <- table(variable)/length(variable)
barplot(prop, ylim=c(0,1), col=adjustcolor(color,alpha.f=0.5), add=TRUE, border=FALSE,
main="Sex", cex.main=0.8)
legend(x="topright", fill=adjustcolor(c("black", color), alpha.f=0.5),
legend=c("2012 baseline", "Yesterday"), border=FALSE, bty="n", cex=0.6)
}
RaceFun <- function(variable, baseline, color){
prop <- table(baseline)/length(baseline)
barplot(prop, ylim=c(0,1), col=adjustcolor("black",alpha.f=0.5), border=FALSE,
xaxt="n")
prop <- table(variable)/length(variable)
barplot(prop, ylim=c(0,1), col=adjustcolor(color,alpha.f=0.5), add=TRUE, border=FALSE,
main="Race", cex.main=0.8)
legend(x="topright", fill=adjustcolor(c("black", color), alpha.f=0.5),
legend=c("2012 baseline", "Yesterday"), border=FALSE, bty="n", cex=0.6)
}
TimeSeriesFun <- function(variable, color){
plot(heat$date, variable, type="n", xlab="Date", ylab="Cases",
xlim=c(yesterday-q, yesterday), cex.axis=0.75, cex.main=0.8, cex.lab=0.6)
axis(side=1, at=heat$date, labels=format(heat$date, format="%d\n%b"), cex.axis=0.6)
lines(heat$date, variable, lty=1, col="darkgrey")
points(heat$date, variable, pch=1, col="black")
points(heat$date, variable, pch=20, col=color)
mm <- c(c(heat$date, today), c(today,rev(heat$date)))
zzblq <-c(rep(min(quantile(variable[which(heat$date <= today - 351 &
heat$date >= today - 380)],
c(.05, .95), na.rm=T)),length(heat$date)+1),
rev(rep(max(quantile(variable[which(heat$date <= today - 351 &
heat$date >= today - 380)],
c(.05, .95), na.rm=T)),length(heat$date)+1)))
polygon(mm, zzblq, col=adjustcolor(color, alpha.f=0.3), border=FALSE)
abline(h=sum(variable[which(heat$date <= today - 351 &
heat$date >= today - 380)])/30,
col=color, lty=1, lwd=5)
legend(x="topright", legend=c("Expected", "Normal variation"),
lty=c(1,1), col=c(color,adjustcolor(color, alpha.f=0.3)), ncol=1,
x.intersp=0.2, y.intersp=0.8, bor=T,cex=0.6, lwd=c(1,4), bty="n")
}
HistFun(variable = dist$gi,
color = symcols[1])
AgeHistFun(variable = giyest$Age,
baseline = gibl$Age,
color = symcols[1])
TimeHistFun(variable = giyest$HalfHour,
baseline = gibl$HalfHour,
color = symcols[1])
SexFun(variable = gi$Sex,
baseline = gibl$Sex,
color= symcols[1])
RaceFun(variable = gi$race,
baseline = gibl$race,
color=symcols[1])
TimeSeriesFun(variable = heat$gi,
color=symcols[1])
###################
#
###################
###################
#
###################
###################
#
###################
###################
#
###################
###################
#
###################
###################
#
###################
###################
#
###################
###################
#
###################
rabies <- alless1213[which(regexpr("rabies*|RABIES*|Rabies*", alless1213$CCDD)>0),]
emesis <- alless1213[which(regexpr("emesis|EMESIS|Emesis", alless1213$CCDD)>0),]
for (i in heat$date){
heat$emesis[which(heat$date == i)] <-
nrow(emesis[which(emesis$Date == i),])}
emesisyest <- emesis[which(emesis$Date == yesterday),]
######################
#******SAVE
#******IMAGE
######################
save.image(paste("E:/workingdirectory/surv/",
tolower(format(Sys.Date(), format="%b")),
format(Sys.Date(), format="%y"), "/surv",
tolower(format(Sys.Date(), format="%d%b%y")), "/surv",
tolower(format(Sys.Date(), format="%d%b%y")), ".Rdata", sep=""))
par(mfrow=c(1,1))
rabiesyest
nrow(rabies)
nrow(rabies[which(rabies$Date == yesterday),])
