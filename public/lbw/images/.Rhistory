###
# ATTACH LIBRARIES
###
library(sas7bdat)
library(rgdal)
library(RColorBrewer)
library(gstat)
library(geoR)
###
# SETWD CONDITIONAL TO SYSTEM I'M ON
###
if ( Sys.info()["sysname"] == "Linux" ){
setwd("/home/joebrew/Documents/")
} else {
setwd("C:/Users/BrewJR/Documents/")
}
###
# READ IN BRFSS DATA
###
dat <- read.sas7bdat("fdoh_private/brfss/alachua.sas7bdat")
names(dat)
names(dat[which(grepl("HRQ", names(dat)))])
source('~/.active-rstudio-document', echo=TRUE)
table(bu$school)
###
# SET WDS
###
if ( Sys.info()["sysname"] == "Linux" ){
public <- "/home/joebrew/Documents/fdoh/public/lbw"
private <- "/media/joebrew/JB/fdoh/private/vital_stats"
} else if(Sys.info()["user"] == "BrewJR" ){
public <- "C:/Users/BrewJR/Documents/fdoh/public/lbw"
private <- "E:/fdoh/private/vital_stats"
} else {
stop("Don't work on this computer!")
}
########
# Read in private data
########
setwd(private)
#source("lbw_read_and_clean.R) #only necessary once
###
# LOAD 2000-2014 DATA
###
load("births_2000-2014.RData")
# Get rid of NA and * counties
births <- births[which(births$county != "*" &
!is.na(births$county)),]
# Fix St Johns / St Lucie
births$county[which(births$county == "ST. JOHNS")] <- "ST JOHNS"
births$county[which(births$county == "SAINT JOHNS")] <- "ST JOHNS"
births$county[which(births$county == "SAINT LUCIE")] <- "ST LUCIE"
# Fix Dade
births$county[which(births$county == "DADE")] <- "MIAMI-DADE"
# Fix unknown
births$county[which(births$county == "UNKNOWN")] <- NA
###
# LOAD FLORIDA ZIP CODE SHAPEFILE
###
setwd(public)
library(rgdal)
fl <- readOGR("florida_zip", "zip")
###
# READ IN INCOME AND STD RATES
###
# read in the std rate data
std <- read.csv("std.csv", stringsAsFactors = FALSE)
# compare to see if names are perfect matches
fl$NAME <- toupper(fl$NAME)
table(fl@data$NAME == std$NAME) # they're not all correct
# get the closest match for each county
fl$name <- NA # create empty vector where we'll put our names
std$name <- std$NAME # we'll use lower cases for the matches
for (i in 1:nrow(fl)){
# see how close (in character changes) each name in fl is to those in STD
m <- adist(fl$NAME[i],
std$NAME)
# get the one with the least differences
ind <- which.min(m)
# get the name from std
best <- std$NAME[ind]
# assign to fl
fl$name[i] <- best
}
# Merge the two datasets together
fl@data <- merge(x = fl@data,
y = std,
by = "name",
all.x = TRUE,
all.y = FALSE)
##########
# READ IN FLORIDA DATA ON LOW BIRTH WEIGHT, POPULATION CHARACTERISTICS
##########
setwd(public)
dat <- read.csv("lbw.csv")
dat$lbw_births <- NULL
dat$live_births <- NULL
# Make a column called percent_black - this should be the percentage of each county's residents which are black
dat$percent_black <- (dat$black/dat$total_pop)*100
# Make a column called percent_white - this should be the percentage of each county's residents which are white
dat$percent_white<- (dat$white/dat$total_pop)*100
# Make a column called percent_other - this should be the percentage of each county's residents which are white
dat$percent_other <- (dat$other/dat$total_pop)*100
# get the closest match for each county
dat$county <- as.character(toupper(dat$county))
dat$name <- NA # create empty vector where we'll put our names
for (i in 1:nrow(dat)){
# see how close (in character changes) each name in fl is to those in STD
m <- adist(dat$county[i],
fl$name)
# get the one with the least differences
ind <- which.min(m)
# get the name from std
best <- fl$name[ind]
# assign to fl
dat$name[i] <- best
}
# check matches and then merge
cbind(dat$name, dat$county)
fl@data <- merge(x = fl@data,
y = dat,
by = "name",
all.x = TRUE,
all.y = FALSE)
# Get lbw stats for each county
library(dplyr)
# Total births
x <- births %>%
group_by(county) %>%
summarise(total_births = n())
total_births <- x$total_births
#(create a dataframe to stick all my aggregations into)
counties <- data.frame(x)
# Low weight births
x <- births %>%
group_by(county) %>%
filter(weight < 2500) %>%
summarise(lbw_births = n())
counties <- merge(x = counties,
y = x,
by = "county",
all.x = TRUE,
all.y = FALSE)
# Total births by year
for (i in 2000:2014){
x <- births %>%
group_by(county) %>%
filter(year == i) %>%
summarise(total_births = n())
x[,paste0("total_births", i)] <- x$total_births
x$total_births <- NULL
counties <- merge(x = counties,
y = x,
by = "county",
all.x = TRUE,
all.y = FALSE)
}
# LBW births by year
for (i in 2000:2014){
x <- births %>%
group_by(county) %>%
filter(year == i,
weight < 2500) %>%
summarise(lbw_births = n())
x[,paste0("lbw_births", i)] <- x$lbw_births
x$lbw_births <- NULL
counties <- merge(x = counties,
y = x,
by = "county",
all.x = TRUE,
all.y = FALSE)
}
# LBW rate by year
for (i in 2000:2014){
counties[,paste0("lbw_rate", i)] <-
counties[,paste0("lbw_births", i)] /
counties[,paste0("total_births", i)]
}
###
# Bring counties data into fl
###
counties$county <- as.character(counties$county)
counties$name <- NA
for (i in 1:nrow(counties)){
# see how close (in character changes) each name in fl is to those in STD
m <- adist(counties$county[i],
fl$name)
# get the one with the least differences
ind <- which.min(m)[1]
# get the name from std
best <- fl$name[ind]
# assign to county
counties$name[i] <- best
}
# Check the names match
cbind(as.character(counties$name), as.character(counties$county))
# Remove the uknown row
counties <- counties[which(!is.na(counties$county)),]
# Merge the two datasets together
fl@data <- merge(x = fl@data,
y = counties,
by = "name",
all.x = TRUE,
all.y = FALSE)
##########################################
# PREPARATION FINISHED
##########################################
###
# Time series chart
###
ts <- data.frame("year" = 2000:2014)
for (i in ts$year){
ts$lbw_rate[which(ts$year == i)] <-
sum(counties[,paste0("lbw_births",i)], na.rm = TRUE) /
sum(counties[,paste0("total_births",i)], na.rm = TRUE)
}
# plot state
plot(ts$year,
ts$lbw_rate,
ylim = c(0,0.14),
xlab = "Year",
ylab = "LBW rate",
type = "l",
col = adjustcolor("black", alpha.f = 0.7),
lwd = 3)
# add lines for counties
library(splines)
#my_colors <- adjustcolor(rainbow(nrow(counties)), alpha.f = 0.6)
my_colors <- colorRampPalette(c("grey", "black"))(nrow(counties))
my_colors <- adjustcolor(my_colors, alpha.f = 0.6)
for (i in 1:nrow(counties)){
xspline(x = 2000:2014,
y = counties[i,
names(counties[grepl("lbw_rate", names(counties))])],
border = my_colors[i],
shape = 1)
}
# thick line for alachua
xspline(x = 2000:2014,
y = counties[which(counties$county == "ALACHUA"),
names(counties[grepl("lbw_rate", names(counties))])],
border = "red",
shape = 1, lwd = 2)
##################
# MAPPING
##################
# Create boundary shapefile of just florida
library(maptools)
library(RColorBrewer)
library(classInt)
boundary <- unionSpatialPolygons(fl, rep(1, length(fl@polygons)))
# Code for compass rose
#(from http://r-sig-geo.2731867.n2.nabble.com/How-to-diplasy-a-compass-rose-on-a-map-td4509034.html)
compassRose<-function(x,y,rot=0,cex=1) {
oldcex<-par(cex=cex)
mheight<-strheight("M")
xylim<-par("usr")
plotdim<-par("pin")
xmult<-(xylim[2]-xylim[1])/(xylim[4]-xylim[3])*plotdim[2]/plotdim[1]
point.angles<-seq(0,7*pi/4,by=pi/4)+pi*rot/180
crspans<-rep(c(mheight*3,mheight/2),4)
xpoints<-cos(point.angles)*crspans*xmult+x
ypoints<-sin(point.angles)*crspans+y
polygon(xpoints,ypoints)
txtxpoints<-cos(point.angles[c(1,3,5,7)])*1.33*crspans[1]*xmult+x
txtypoints<-sin(point.angles[c(1,3,5,7)])*1.33*crspans[1]+y
text(txtxpoints,txtypoints,c("E","N","W","S"))
par(oldcex)
}
TractFun <- function(var,
color = "Blues",
style = "equal", # or equal/quantile
nclr = 8,
title = NA,
dataPrecision = 0,
border  = NA,
lwd = 0.2,
preset_scale = FALSE){
plotclr <- brewer.pal(nclr, color)
if(preset_scale){
class <- classIntervals(rnorm(n = 10000, mean = 8.2, sd = 2 ),
nclr, style = style, dataPrecision = dataPrecision)
} else{
class <- classIntervals(var, nclr, style = style, dataPrecision=dataPrecision) #use "equal" instead
}
colcode <- findColours(class, plotclr)
legcode <- paste0(gsub(",", " - ", gsub("[[]|[]]|[)]", "", names(attr(colcode, "table")))))
plot(fl, border= border, col=colcode, lwd = lwd)
plot(boundary, add = TRUE)
legend("center", # position
legend = legcode, #names(attr(colcode, "table")),
fill = attr(colcode, "palette"),
cex = 0.6,
border=NA,
bty = "n",
title = title)
compassRose(x = -80.5 ,y = 30,rot=0,cex=0.25)
}
TractFun(var = fl$lbw_rate2008*100,
color = "Blues",
style = "equal", # or equal/quantile
nclr = 8,
title = NA,
dataPrecision = 1,
border = "black",
lwd = 0.2,
preset_scale = TRUE)
title(main = "2008 LBW rate")
setwd(paste0(public, "/images"))
for (i in 2001:2014){
png(filename = paste0("map", i, ".png"),
width = 750,
height = 500)
TractFun(var = fl@data[,paste0("lbw_rate", i)]*100,
color = "Blues",
style = "equal", # or equal/quantile
nclr = 8,
title = NA,
dataPrecision = 1,
border = "black",
lwd = 0.2,
preset_scale = TRUE)
title(main = paste0(i, " LBW rate"))
dev.off()
}
#####################33
# GOOGLE VIS
###########################
suppressPackageStartupMessages(library(googleVis))
names(fl@data)
gvisMotionChart(data = counties,
idvar = "county",
#timevar = "year",
xvar = "percent_black",
yvar = "lbw_rate2013",
colorvar = "lbw_rate2014",
sizevar = "total_pop")
?gvisMotionChart
?gvisBarChart
gvisBarChart(data = fl@data,
xvar = "county",
yvar = "lbw_rate2013")
fl@data$county
fl@data
names(fl@data)
gvisBarChart(data = fl@data,
xvar = "name",
yvar = "lbw_rate2013")
x <- gvisBarChart(data = fl@data,
xvar = "name",
yvar = "lbw_rate2013")
plot(x)
x <- gvisBubbleChart(data = fl@data,
idvar = "name",
xvar = "percent_black",
yvar = "lbw_rate2013")
plot(x)
fl$income
names(fl@data)
TractFun(var = fl$INCOME,
color = "Blues",
style = "equal", # or equal/quantile
nclr = 8,
title = NA,
dataPrecision = 1,
border = "black",
lwd = 0.2)
title(main = "State income")
# INCOME
TractFun(var = fl$INCOME,
color = "Blues",
style = "equal", # or equal/quantile
nclr = 8,
title = NA,
dataPrecision = -1,
border = "black",
lwd = 0.2)
title(main = "Median household income")
TractFun(var = fl$INCOME,
color = "Blues",
style = "equal", # or equal/quantile
nclr = 8,
title = NA,
dataPrecision = -2,
border = "black",
lwd = 0.2)
title(main = "Median household income")
# RACE
TractFun(var = fl$percent_black,
color = "Blues",
style = "equal", # or equal/quantile
nclr = 8,
title = NA,
dataPrecision = 0,
border = "black",
lwd = 0.2)
title(main = "Percent African American")
TractFun(var = fl$percent_black,
color = "Blues",
style = "quantile", # or equal/quantile
nclr = 8,
title = NA,
dataPrecision = 0,
border = "black",
lwd = 0.2)
title(main = "Percent African American")
# RACE
TractFun(var = fl$percent_black,
color = "Blues",
style = "equal", # or equal/quantile
nclr = 8,
title = NA,
dataPrecision = 0,
border = "black",
lwd = 0.2)
title(main = "Percent African American")
fl$percent_blac[which(fl$county == "MARION")]
fl$percent_blac[which(fl$name == "MARION")]
fl$percent_black[which(fl$name == "MARION")]
fl$percent_black[which(fl$name == "ALACHUA")]
?classIntervals
TractFun(var = fl$percent_black,
color = "Blues",
style = "equal", # or equal/quantile
nclr = 8,
title = NA,
dataPrecision = NULL,
border = "black",
lwd = 0.2)
title(main = "Percent African American")
names(fl@data)
cbind(fl@data$NAME.x, fl@data$name)
