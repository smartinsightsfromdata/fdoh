###
# ATTACH LIBRARIES
###
library(sas7bdat)
library(rgdal)
library(RColorBrewer)
library(gstat)
library(geoR)
###
# SETWD CONDITIONAL TO SYSTEM I'M ON
###
if ( Sys.info()["sysname"] == "Linux" ){
setwd("/home/joebrew/Documents/")
} else {
setwd("C:/Users/BrewJR/Documents/")
}
###
# READ IN BRFSS DATA
###
dat <- read.sas7bdat("fdoh_private/brfss/alachua.sas7bdat")
names(dat)
names(dat[which(grepl("HRQ", names(dat)))])
source('~/.active-rstudio-document', echo=TRUE)
table(bu$school)
###
# SET WDS
###
if ( Sys.info()["sysname"] == "Linux" ){
public <- "/home/joebrew/Documents/fdoh/public/lbw"
private <- "/media/joebrew/JB/fdoh/private/vital_stats"
} else if(Sys.info()["user"] == "BrewJR" ){
public <- "C:/Users/BrewJR/Documents/fdoh/public/lbw"
private <- "E:/fdoh/private/vital_stats"
} else {
stop("Don't work on this computer!")
}
########
# Read in private data
########
setwd(private)
#source("lbw_read_and_clean.R) #only necessary once
###
# LOAD 2000-2014 DATA
###
load("births_2000-2014.RData")
# Get rid of NA and * counties
births <- births[which(births$county != "*" &
!is.na(births$county)),]
# Fix St Johns / St Lucie
births$county[which(births$county == "ST. JOHNS")] <- "ST JOHNS"
births$county[which(births$county == "SAINT JOHNS")] <- "ST JOHNS"
births$county[which(births$county == "SAINT LUCIE")] <- "ST LUCIE"
# Fix Dade
births$county[which(births$county == "DADE")] <- "MIAMI-DADE"
# Fix unknown
births$county[which(births$county == "UNKNOWN")] <- NA
###
# LOAD FLORIDA ZIP CODE SHAPEFILE
###
setwd(public)
library(rgdal)
fl <- readOGR("florida_zip", "zip")
fl$name <- toupper(fl$NAME)
# since merging messes with order, assign and id and keep in this order
fl$id <- 1:nrow(fl)
# test some stuff with the map
fl$color <- "blue"
fl$color[which(fl$name == "ALACHUA")] <- "red"
fl$color[which(fl$name == "MARION")] <- "green"
fl$color[which(fl$name == "MIAMI-DADE")] <- "orange"
plot(fl, col = fl$color)
###
# READ IN INCOME AND STD RATES
###
# read in the std rate data
std <- read.csv("std.csv", stringsAsFactors = FALSE)
# compare to see if names are perfect matches
table(fl@data$name == std$NAME) # they're not all correct
# get the closest match for each county
std$name <- NA
for (i in 1:nrow(std)){
# see how close (in character changes) each name in fl is to those in STD
m <- adist(std$NAME[i],
fl$name)
# get the one with the least differences
ind <- which.min(m)
# get the name from std
best <- fl$name[ind][1]
# assign to fl
std$name[i] <- best
}
# fix the duplicated lake issue
std$name[which(std$NAME == "DADE")] <- "MIAMI-DADE"
# Merge the two datasets together
fl@data <- merge(x = fl@data,
y = std,
by = "name",
all.x = TRUE,
all.y = FALSE)
# test out to make sure there was no reordering
fl$color <- "blue"
fl$color[which(fl$name == "ALACHUA")] <- "red"
fl$color[which(fl$name == "MARION")] <- "green"
fl$color[which(fl$name == "MIAMI-DADE")] <- "orange"
plot(fl, col = fl$color)
##########
# READ IN FLORIDA DATA ON LOW BIRTH WEIGHT, POPULATION CHARACTERISTICS
##########
setwd(public)
dat <- read.csv("lbw.csv")
dat$lbw_births <- NULL
dat$live_births <- NULL
# Make a column called percent_black - this should be the percentage of each county's residents which are black
dat$percent_black <- (dat$black/dat$total_pop)*100
# Make a column called percent_white - this should be the percentage of each county's residents which are white
dat$percent_white<- (dat$white/dat$total_pop)*100
# Make a column called percent_other - this should be the percentage of each county's residents which are white
dat$percent_other <- (dat$other/dat$total_pop)*100
# get the closest match for each county
dat$county <- as.character(toupper(dat$county))
dat$name <- NA # create empty vector where we'll put our names
for (i in 1:nrow(dat)){
# see how close (in character changes) each name in fl is to those in STD
m <- adist(dat$county[i],
fl$name)
# get the one with the least differences
ind <- which.min(m)
# get the name from std
best <- fl$name[ind][1]
# assign to fl
dat$name[i] <- best
}
# check matches and then merge
cbind(dat$name, dat$county)
fl@data <- merge(x = fl@data,
y = dat,
by = "name",
all.x = TRUE,
all.y = FALSE)
# Get lbw stats for each county
library(dplyr)
# Total births
x <- births %>%
group_by(county) %>%
summarise(total_births = n())
total_births <- x$total_births
#(create a dataframe to stick all my aggregations into)
counties <- data.frame(x)
# Low weight births
x <- births %>%
group_by(county) %>%
filter(weight < 2500) %>%
summarise(lbw_births = n())
counties <- merge(x = counties,
y = x,
by = "county",
all.x = TRUE,
all.y = FALSE)
# Total births by year
for (i in 2000:2014){
x <- births %>%
group_by(county) %>%
filter(year == i) %>%
summarise(total_births = n())
x[,paste0("total_births", i)] <- x$total_births
x$total_births <- NULL
counties <- merge(x = counties,
y = x,
by = "county",
all.x = TRUE,
all.y = FALSE)
}
# LBW births by year
for (i in 2000:2014){
x <- births %>%
group_by(county) %>%
filter(year == i,
weight < 2500) %>%
summarise(lbw_births = n())
x[,paste0("lbw_births", i)] <- x$lbw_births
x$lbw_births <- NULL
counties <- merge(x = counties,
y = x,
by = "county",
all.x = TRUE,
all.y = FALSE)
}
# LBW rate by year
for (i in 2000:2014){
counties[,paste0("lbw_rate", i)] <-
counties[,paste0("lbw_births", i)] /
counties[,paste0("total_births", i)]
}
###
# Bring counties data into fl
###
counties$county <- as.character(counties$county)
counties$name <- NA
for (i in 1:nrow(counties)){
# see how close (in character changes) each name in fl is to those in STD
m <- adist(counties$county[i],
fl$name)
# get the one with the least differences
ind <- which.min(m)[1]
# get the name from std
best <- fl$name[ind]
# assign to county
counties$name[i] <- best
}
# Check the names match
cbind(as.character(counties$name), as.character(counties$county))
# Remove the uknown row
counties <- counties[which(!is.na(counties$county)),]
# Check on reps
length(unique(counties$name)) == length(counties$name)
# Merge the two datasets together
fl@data <- merge(x = fl@data,
y = counties,
by = "name",
all.x = TRUE,
all.y = FALSE)
##########
##################################
# ADD THOMPSON / CLARK CATEGORIES
##################################
births$cat <- ifelse(births$black==FALSE &
births$married  &
births$ed >= 3,
1,
ifelse(births$black==FALSE &
births$married  &
births$ed < 3,
2,
ifelse(births$black==FALSE &
births$married ==FALSE &
births$ed >= 3,
3,
ifelse(births$black==FALSE &
births$married ==FALSE &
births$ed < 3,
4,
ifelse(births$black &
births$married  &
births$ed >= 3,
5,
ifelse(births$black &
births$married  &
births$ed < 3,
6,
ifelse(births$black &
births$married ==FALSE &
births$ed >= 3,
7,
ifelse(births$black &
births$married ==FALSE &
births$ed < 3,
8,
9))))))))
##########################################
# PREPARATION FINISHED
##########################################
#####
# LBW RATE BY CAT
dat <- data.frame("cat" = 1:8)
# total births
x <- births %>%
group_by(cat) %>%
summarise(total_births = n())
x <- x[which(!is.na(x$cat)),]
dat$total_births <- x$total_births
# lbw_births
x <- births %>%
filter(weight < 2500) %>%
group_by(cat) %>%
summarise(lbw_births = n())
x <- x[which(!is.na(x$cat)),]
dat$lbw_births <- x$lbw_births
# lbw_rate
dat$lbw_rate <- dat$lbw_births / dat$total_births
### PLOTS
my_colors <- colorRampPalette(c("lightblue", "darkorange"))(8)
barplot(dat$total_births/sum(dat$total_births)*100,
names.arg = dat$cat,
col = my_colors,
ylab = "Percent",
border = FALSE)
title(main = "Births by category")
my_colors <- colorRampPalette(c("lightblue", "darkorange"))(8)
barplot(dat$lbw_rate*100,
names.arg = dat$cat,
col = my_colors,
ylab = "%",
border = FALSE)
title(main = "LBW rate by category")
###
# Time series chart
###
ts <- data.frame("year" = 2000:2014)
for (i in ts$year){
ts$lbw_rate[which(ts$year == i)] <-
sum(counties[,paste0("lbw_births",i)], na.rm = TRUE) /
sum(counties[,paste0("total_births",i)], na.rm = TRUE)
}
plot(ts$year,
ts$lbw_rate,
ylim = c(0,0.14),
xlab = "Year",
ylab = "LBW rate",
type = "l",
col = adjustcolor("black", alpha.f = 0.7),
lwd = 3)
points(ts$year,
ts$lbw_rate,
pch = 16)
plot(ts$year,
ts$lbw_rate,
ylim = c(0.6,0.14),
xlab = "Year",
ylab = "LBW rate",
type = "l",
col = adjustcolor("black", alpha.f = 0.7),
lwd = 3)
points(ts$year,
ts$lbw_rate,
pch = 16)
plot(ts$year,
ts$lbw_rate,
ylim = c(0.06,0.14),
xlab = "Year",
ylab = "LBW rate",
type = "l",
col = adjustcolor("black", alpha.f = 0.7),
lwd = 3)
points(ts$year,
ts$lbw_rate,
pch = 16)
plot(ts$year,
ts$lbw_rate,
ylim = c(0.06,0.14),
xlab = "Year",
ylab = "LBW rate",
type = "l",
col = adjustcolor("black", alpha.f = 0.7),
lwd = 3)
points(ts$year,
ts$lbw_rate,
pch = 16)
library(splines)
#my_colors <- adjustcolor(rainbow(nrow(counties)), alpha.f = 0.6)
my_colors <- colorRampPalette(c("grey", "black"))(nrow(counties))
my_colors <- adjustcolor(my_colors, alpha.f = 0.6)
for (i in 1:nrow(counties)){
xspline(x = 2000:2014,
y = counties[i,
names(counties[grepl("lbw_rate", names(counties))])],
border = my_colors[i],
shape = 1)
}
xspline(x = 2000:2014,
y = counties[which(counties$county == "ALACHUA"),
names(counties[grepl("lbw_rate", names(counties))])],
border = "red",
shape = 1, lwd = 2)
