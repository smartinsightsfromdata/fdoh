myfiles[[i]]$date <-
as.Date(gsub("X", "",colnames(myfileswithdate[[i]])[1]),
format="%m.%d.%Y")
}
############
#CBIND ALL ELEMENTS OF THE MYFILES LIST INTO ONE DF
############
library(plyr)
raw.dat <- rbind.fill(myfiles)
############
#CODE ALL "OTHER" MOSQUITOES AS 100
############
raw.dat$code[which(grepl("other|Other|OTHER",
raw.dat$mosquito))] <-  100
# ############
# # WRITE A CSV FOR CESAR ESCOBAR (24 June 2014)
# ############
# setwd("C:/Users/BrewJR/Documents/fdoh/public/mosquito/cesar")
# write.csv(raw.dat, "raw_data.csv")
############
# MAKE A TIME SERIES DF
############
ts <- as.data.frame(unique(sort(raw.dat$date)))
colnames(ts) <- "date"
############
# POPULATE TS WITH TOTAL NUMBER OF TRAPS
############
for (i in ts$date){
ts$nTraps[which(ts$date == i)] <-
raw.dat$nTraps[which(raw.dat$date == i)][1]
}
############
# POPULATE WITH TOTAL NUMBER OF MOSQUITOES
############
for (i in ts$date){
ts$tot[which(ts$date == i)] <-
sum(raw.dat[which(raw.dat$date == i),
grepl("site", colnames(raw.dat))], na.rm=TRUE)
}
############
# POPULATE WITH EACH KIND OF MOSQUITO
############
for (i in unique(sort(raw.dat$code))){
ts[,paste0("code", i)] <- NA
}
for (i in ts$date){
for (j in unique(sort(raw.dat$code))){
ts[which(ts$date == i),
paste0("code", j)] <- ifelse(
nrow(raw.dat[which(raw.dat$date == i &
raw.dat$code == j),]) == 0,
0,
sum(raw.dat[which(raw.dat$date == i &
raw.dat$code == j),
colnames(raw.dat[which(grepl("site", colnames(raw.dat)))])],
na.rm=TRUE))
}
}
#this ifelse statement was necessary due to
#the fact that many dates did not have a row in which
#code was equal to j
############
# POPULATE WITH N MOSQUITOES PER TRAP
############
for (i in as.numeric(gsub("site", "",colnames(raw.dat[which(grepl("site",
colnames(raw.dat)))])))){
ts[,paste0("site", i)] <- NA
}
for (i in ts$date){
for (j in as.numeric(gsub("site", "",colnames(raw.dat[which(grepl("site", colnames(raw.dat)))])))){
ts[which(ts$date == i),
paste0("site",j)] <-
sum(raw.dat[which(raw.dat$date == i),
paste0("site", j)], na.rm=TRUE)
}
}
############
# POPULATE WITH EACH KIND OF MOSQUITO AT EACH TRAP
############
for (i in unique(sort(raw.dat$code))){
for (j in as.numeric(gsub("site", "",colnames(raw.dat[which(grepl("site", colnames(raw.dat)))])))){
ts[,paste0("code", i, "site", j)] <- NA
}
}
for (i in ts$date){
for (j in as.numeric(gsub("site", "",colnames(raw.dat[which(grepl("site", colnames(raw.dat)))])))){
for (k in unique(sort(raw.dat$code))){
ts[which(ts$date == i),
paste0("code", k, "site", j)] <-
ifelse(nrow(raw.dat[which(raw.dat$date == i &
raw.dat$code == k),]) == 0,
0,
sum(raw.dat[which(raw.dat$date == i &
raw.dat$code == k),
paste0("site", j)],  na.rm=TRUE)
)
}
}
}
#############
# READ IN DISEASE INFORMATION
#############
vec <- read.csv("C:/Users/BrewJR/Documents/fdoh/public/mosquito/benVectors.csv", sep=";")
colnames(vec) <- c("code", "name", "wnv", "slev", "eeev", "chik", "malaria", "dengue", "yellow")
############
# POPULATE WITH N OF VECTORS PER DAY
############
#CREATE NEW COLUMNS FOR EACH VECTOR IN raw.dat
for (i in colnames(vec[which(grepl("code|name", colnames(vec))==FALSE)])){
raw.dat[,i] <- NA
}
#POPULATE BOOLEAN DISEASE COLUMNS IN raw.dat
for (i in unique(sort(raw.dat$code))){
for (j in rev(colnames(vec))[1:7]){
raw.dat[which(raw.dat$code == i), j] <-
vec[which(vec$code == i),j]
}
}
#CREATE NEW COLUMNS FOR EACH VECTOR IN ts
for (i in colnames(vec[which(grepl("code|name", colnames(vec))==FALSE)])){
ts[,i] <- NA
}
#POPULATE ts WITH TOTAL NUMBER OF EACH DISEASE TYPE
for (i in ts$date){
for (j in rev(colnames(ts))[1:7]){
ts[which(ts$date == i), j] <-
sum(raw.dat[which(raw.dat$date == i &
raw.dat[,j] == TRUE),
colnames(raw.dat[which(grepl("site", colnames(raw.dat)))])],
na.rm=TRUE)
}
}
###################
# POPULATE ts WITH DISEASE TYPE AT EACH SITE
###################
for (i in rev(colnames(vec))[1:7]){
for (j in as.numeric(gsub("site", "",colnames(raw.dat[which(grepl("site", colnames(raw.dat)))])))){
ts[,paste0(i, "site", j)] <- NA
}
}
for (i in ts$date){
for (j in as.numeric(gsub("site", "",colnames(raw.dat[which(grepl("site", colnames(raw.dat)))])))){
for (k in rev(colnames(vec))[1:7]){
ts[which(ts$date == i),
paste0(k, "site", j)] <-
ifelse(nrow(raw.dat[which(raw.dat$date == i &
raw.dat[,k] == TRUE),]) == 0,
0,
sum(raw.dat[which(raw.dat$date == i &
raw.dat[,k] == TRUE),
paste0("site", j) ], na.rm=TRUE)
)
}
}
}
############
# ADD A year COLUMN TO TS
############
ts$year <- as.numeric(format(ts$date, format="%Y"))
############
# ADD A day COLUMN TO TS
############
ts$day <- as.numeric(format(ts$date, format="%j"))
############
# WRITE A CSV FOR CESAR ESCOBAR (24 June 2014)
############
# setwd("C:/Users/BrewJR/Documents/fdoh/public/mosquito/cesar")
# write.csv(ts, "time_series.csv")
############
# ADD A COLOR TO EACH ROW OF TS (BY YEAR)
############
library(RColorBrewer)
yearcols <- brewer.pal(length(unique(sort(ts$year))), "Set3")
ts$col <- NA
for (i in 1: length(unique(sort(ts$year)))){
ts$col[which(ts$year == unique(sort(ts$year))[i])] <-
yearcols[i]
}
############
# CREATE A SIMPLE DF LINKING $code TO MOSQUITO NAME
# ############
# id <- as.data.frame(unique(sort(raw.dat$code)))
# colnames(id) <- "code"
#
# id$name <- NA
# for (i in id$code){
#   id$name[which(id$code == i)] <-
#     as.character(raw.dat$mosquito[which(raw.dat$code == i)])[1]
# }
#
# id$name <- gsub("Cx coronator|[()]", "", id$name)
# write.csv(id, "C:/Users/BrewJR/Documents/fdoh/public/mosquito/id.csv")
#############
# READ IN MOSQUITO ID INFO
#############
#id <- read.csv("C:/Users/BrewJR/Documents/fdoh/public/mosquito/id.csv")
############
# READ IN TRAP LOCATION DATA
############
loc <- read.csv("C:/Users/BrewJR/Documents/fdoh/public/mosquito/traplatlong.csv")
############
# READ IN RAINFALL / TEMP DATA FROM 2008-13
############
rt <- read.csv("C:/Users/BrewJR/Documents/fdoh/public/mosquito/rainAndTemp/rainAndTempUpdated.csv")
rt$date <- as.Date(rt$date, format="%Y-%m-%d")
##############
# ADD MORE RECENT RAINFALL
##############
library(weatherData)
#getWeatherForDate("GNV", "2014-04-14")
newTemp <- getSummarizedWeather("GNV", start_date = max(rt$date) + 1,
end_date = Sys.Date() - 1,
opt_custom_columns = TRUE,
custom_columns = c(2,4,20))
############
#CLEAN UP newTemp A BIT SO AS TO MERGE WITH RT
############
newTemp$date <- as.Date(gsub(" CDT", "", newTemp$Date), format="%Y-%m-%d")
newTemp$Date <- NULL
newTemp$rain <- newTemp$PrecipitationIn
newTemp$rain <- as.numeric(newTemp$rain)
newTemp$rain[which(is.na(newTemp$rain))] <- 0
newTemp$PrecipitationIn <- NULL
newTemp$minTemp <- newTemp$Min_TemperatureF
newTemp$Min_TemperatureF <- NULL
newTemp$maxTemp <- newTemp$Max_TemperatureF
newTemp$Max_TemperatureF <- NULL
############
# PREPARE rt FOR MERGING BY REMOVING EXTRA DATES
############
rt <- rt[which(rt$date < min(newTemp$date)),]
#########################################
# MERGE newTemp WITH  rt
#########################################
rt <- rbind.fill(rt, newTemp)
#If you run twice on one day, you get non-consequential errors
#########################################
#ADD CUMULATIVE RAINFALL TO CORRESPONDING COLUMNS
#########################################
rowsToAdd <- as.numeric(row.names(rt[which(is.na(rt$rain20.39)),]))
rowsToAdd <- rowsToAdd[rowsToAdd>30]
for (j in colnames(rt)[grepl("rain", colnames(rt))][-1]){
for (i in rowsToAdd){
rt[i,j] <-
sum(rt$rain[which(rt$date <= rt$date[i-min(as.numeric(unlist(strsplit(gsub("rain", "", j), ".", fixed=TRUE))))] &
rt$date >= rt$date[i-max(as.numeric(unlist(strsplit(gsub("rain", "", j), ".", fixed=TRUE))))])], na.rm=TRUE)
}
}
#########################################
#ADD MINIMUM MINTEMP FOR EACH MINTEMP COLUMN COLUMN
#########################################
for (j in colnames(rt)[grepl("minTemp", colnames(rt))][-1]){
for (i in rowsToAdd){
rt[i,j] <-
min(rt$minTemp[which(rt$date <= rt$date[i-min(as.numeric(unlist(strsplit(gsub("minTemp", "", j), ".", fixed=TRUE))))] &
rt$date >= rt$date[i-max(as.numeric(unlist(strsplit(gsub("minTemp", "", j), ".", fixed=TRUE))))])], na.rm=TRUE)
}
}
#########################################
# WRITE CSV WITH UPDATED RAIN AND TEMP INFO
#########################################
write.csv(rt, "C:/Users/BrewJR/Documents/fdoh/public/mosquito/rainAndTemp/rainAndTempUpdated.csv")
##########################################
# DEFINE MOST RECENT TRAP DATE
##########################################
recent <- max(ts$date[which(is.na(ts$tot)==FALSE)])
#########################################
# ADD MOSQUITO DATA TO RT
#########################################
#master <- merge(ts, rt[which(rt$date != recent),], by="date")
master <- merge(ts, rt, by="date")
#########################################
# CREATE A MOSQUITOES PER TRAP COLUMN
#########################################
master$totPer <- master$tot / master$nTraps
#########################################
# CREATE A DAY OF YEAR COLUMN
#########################################
master$day <- as.numeric(format(master$date, format="%j"))
#########################################
# CREATE A MOST RECENT TRAP COLUMN
#########################################
master$mostRecent <- NA
for (i in 2:nrow(master)){
master$mostRecent[i] <-
ifelse(master$date[i] - master$date[i-1] > 20,
NA,
master$totPer[i-1])
}
#########################################
#### CREATE A VECTOR OF ALL THE POSSIBLE COMBINATIONS OF MIN TEMP RANGES AND RAINFALL RANGES
#########################################
rainPosibs <- rep(colnames(master)[grepl("rain", colnames(master))][-1],
length(colnames(master)[grepl("minTemp", colnames(master))][-1]))
# minTempPosibs <- sort(rep(colnames(master)[grepl("minTemp", colnames(master))][-1],
#                           length(colnames(master)[grepl("rain", colnames(master))][-1])))
# posibs <- paste0(rainPosibs, "AND", minTempPosibs)
#########################################
#CREATE A DATA FRAME FROM MY POSIBS VECTOR
# THIS IS WHERE I'LL PUT MY MODEL QUALITY INDICATORS
#########################################
#########################################
#pred <- as.data.frame(posibs)
predRain <- as.data.frame(unique(sort(rainPosibs)))
colnames(predRain) <- "posibs"
#predTemp <- as.data.frame(unique(sort(minTempPosibs)))
#colnames(predTemp) <- "posibs"
#########################################
#Test the r-squared for each column (RAIN ONLY)
#########################################
predRain$r.squared <- NA
predRain$adj.r.squared <- NA
predRain$sigma <- NA
# #GOOD
# for (i in predRain$posibs){
#   mylm <- summary(lm(master[,"totPer"] ~
#                        master[,i] +
#                        I(master[,i]^2)))
#
#   predRain$r.squared[which(predRain$posibs == i)] <-
#     mylm$r.squared
#
#   predRain$adj.r.squared[which(predRain$posibs == i)] <-
#     mylm$adj.r.squared
#
#   predRain$sigma[which(predRain$posibs == i)] <-
#     mylm$sigma
# }
# EXPERIMENTAL
for (i in predRain$posibs){
mylm <- summary(lm(master[,"totPer"] ~
I(master[,i]^2) +
master$mostRecent + 0))
predRain$r.squared[which(predRain$posibs == i)] <-
mylm$r.squared
predRain$adj.r.squared[which(predRain$posibs == i)] <-
mylm$adj.r.squared
predRain$sigma[which(predRain$posibs == i)] <-
mylm$sigma
}
#
# #########################################
# #Test the r-squared for each column (TEMP ONLY)
# #########################################
# predTemp$r.squared <- NA
# predTemp$adj.r.squared <- NA
# predTemp$sigma <- NA
# for (i in 1:length(predTemp$posibs)){
#   mylm <- summary(lm(master[,"totPer"] ~
#                        master[,minTempPosibs[i]]
#   ))
#   predTemp$r.squared[i] <- mylm$r.squared
#   predTemp$adj.r.squared[i] <- mylm$adj.r.squared
#   predTemp$sigma[i] <- mylm$sigma
#
# }
#
# #########################################
# #Test the r-squared for each column (RAIN AND TEMP)
# #########################################
# pred$r.squared <- NA
# pred$adj.r.squared <- NA
# pred$sigma <- NA
# for (i in 1:length(pred$posibs)){
#   mylm <- summary(lm(master[,"totPer"] ~
#                        master[,unlist(strsplit(posibs, "AND")[i])[1]] +
#                        master[,unlist(strsplit(posibs, "AND")[i])[2]]
#   ))
#   pred$r.squared[i] <- mylm$r.squared
#   pred$adj.r.squared[i] <- mylm$adj.r.squared
#   pred$sigma[i] <- mylm$sigma
#
# }
#########################################
#Select best predicition model
#########################################
#pred2 <- rbind(pred, predTemp, predRain)
#
# pred2 <- pred2[rev(order(pred2$adj.r.squared)),] #or should I order by Sigma?
#
# head(pred2)
#
# pred3 <- pred2[order(pred2$sigma),]
# pred3 <- pred3[which(is.na(pred3$sigma) == FALSE),]
# best <- as.character(pred2$posibs[which(pred2$adj.r.squared ==
#                                           max(pred2$adj.r.squared))])
#
# bestModel <- lm(master$totPer ~ master[,best])
# names(bestModel$coefficients)[2] <-
#   as.character(best)
# summary(bestModel) # IT LOOKS LIKE MIN TEMP DOESN'T EVEN MATTER
#BASICALLY, my best bets are 5.25 (r.sq = .39)
# and 20.40 (r.sq = .38)
predRain <- predRain[rev(order(predRain$adj.r.squared)),]
head(predRain)
#good
# best <- lm(totPer ~ rain17.36 +
#              I(rain17.36^(2)) + 0, data = master)
#############
# RANDOM FOREST MODEL (September 5, 2014)
#############
# library(randomForest)
#
# my_rf <- randomForest(totPer ~ ., na.action = na.omit, data = master )
##############
# MODELING
##############
train <- master[which(master$date < "2014-01-01" ),
grepl("rain|Temp|totPer", colnames(master)) &
grepl("5|totPer", colnames(master)) &
grepl("1|totPer", colnames(master)) &
!grepl("mostRecent", colnames(master))]
test <- master[which(master$date >= "2014-01-01"),
grepl("rain|Temp|totPer", colnames(master)) &
grepl("5|totPer", colnames(master)) &
grepl("1|totPer", colnames(master)) &
!grepl("mostRecent", colnames(master))]
###########
# GAM
###########
library(mgcv)
modformchar <- paste0("totPer ~", paste(colnames(train[which(!grepl("totPer", colnames(train)))]), collapse = "+"))
modform <- as.formula(modformchar)
fit <- gam(modform, data = train)
x <- predict(fit, newdata = test)
barplot(x)
fit <- gam(modform + 0, data = train)
modformchar <- paste0("totPer ~",
paste(colnames(train[which(!grepl("totPer", colnames(train)))]), collapse = "+"),
" + 0")
modform <- as.formula(modformchar)
fit <- gam(modform, data = train)
x <- predict(fit, newdata = test)
barplot(x)
modform
fit <- rpart(modform, data = train,
control=rpart.control(minsplit=10, cp=0.00001))
library(rpart)
fit <- rpart(modform, data = train,
control=rpart.control(minsplit=10, cp=0.00001))
fit <- rpart(modform, data = train)
fit <- randomForest(modform, data = train)
library(randomForest)
install.packages("randomForest")
library(randomForest)
fit <- randomForest(modform, data = train)
library(weatherData)
# Get weather for just one day
getWeatherForDate("GNV", "2014-04-14")
install.packages("weatherData")
library(weatherData)
# Get weather for just one day
getWeatherForDate("GNV", "2014-04-14")
start <- as.Date("2014-01-01", format = "%Y-%m-%d")
x <- getSummarizedWeather("GNV", start_date = start,
end_date = Sys.Date() - 1,
opt_custom_columns = TRUE,
custom_columns = c(2,4,20))
head(x)
plot(x$Date, x$PrecipitationIn)
plot(x$Date, x$PrecipitationIn, type = "l")
plot(x$Date, x$PrecipitationIn,
cex = x$PrecipitationIn,
col = adjustcolor("red", alpha.f=0.2))
x$PrecipitationIn
plot(x$Date, as.numeric(x$PrecipitationIn),
cex = as.numeric(x$PrecipitationIn),
col = adjustcolor("red", alpha.f=0.2))
plot(x$Date, as.numeric(x$PrecipitationIn),
cex = as.numeric(x$PrecipitationIn),
col = adjustcolor("red", alpha.f=0.4),
pch = 16)
lines(x$Date, as.numeric(x$PrecipitationIn),
col = adjustcolor("black", alpha.f = 0.1))
plot(x$Date, as.numeric(x$PrecipitationIn),
cex = as.numeric(x$PrecipitationIn),
col = adjustcolor("red", alpha.f=0.4),
pch = 16)
lines(x$Date, as.numeric(x$PrecipitationIn),
col = adjustcolor("black", alpha.f = 0.4))
head(x)
barplot(x$Max_TemperatureF)
barplot(x$Max_TemperatureF, border = NA)
barplot(x$Min_TemperatureF, border = NA,
col = adjustcolor("darkblue", alpha.f = 0.3))
barplot(x$Min_TemperatureF, border = NA,
col = adjustcolor("darkblue", alpha.f = 0.3),
add = T)
# Plot max temperature
barplot(x$Max_TemperatureF, border = NA)
# Add min temperature
barplot(x$Min_TemperatureF, border = NA,
col = adjustcolor("darkblue", alpha.f = 0.3),
add = T)
plot(x$Date, x$Max_TemperatureF, border = NA)
plot(x$Date, x$Max_TemperatureF,
col = adjustcolor("darkred", alpha.f = 0.3))
plot(x$Date, x$Max_TemperatureF,
col = adjustcolor("darkred", alpha.f = 0.3),
pch = 16)
plot(x$Date, x$Min_TemperatureF,
col = adjustcolor("darkblue", alpha.f = 0.3),
pch = 16,
add = T)
plot(x$Date, x$Max_TemperatureF,
col = adjustcolor("darkred", alpha.f = 0.3),
pch = 16)
# Add min temperature
points(x$Date, x$Min_TemperatureF,
col = adjustcolor("darkblue", alpha.f = 0.3),
pch = 16,
add = T)
