########################
# HISTORICAL RAINFALL
########################
plot(rt$date,
rt$rain,
type="p",
col=adjustcolor("black", alpha.f=0.2),
pch=16,
xlab="Date",
ylab="Daily rainfall (in.)",
cex.axis=0.6)
############
# PLOT OVERLAPPED TIME SERIES
############
plot(ts$day, ts$tot/ts$nTraps,
type="n",
xlab="Day",
ylab="Mosquitoes")
#ADD LINES
for (i in unique(sort(ts$year))){
lines(ts$day[which(ts$year == i)],
ts$tot[which(ts$year == i)] /
ts$nTraps[which(ts$year == i)],
col=adjustcolor(ts$col[which(ts$year == i)], alpha.f=0.5),
lwd=3)
text(x=ts$day[which(ts$year == i &
ts$tot / ts$nTraps ==
max(ts$tot[which(ts$year == i)]/
ts$nTraps[which(ts$year == i)]))],
y=max(ts$tot[which(ts$year == i)] /
ts$nTraps[which(ts$year == i)]),
labels=i,
col=adjustcolor(ts$col[which(ts$year == i)], alpha.f=0.7)[1])
Sys.sleep(1)
}
################
# PLOT MOSQUITOES PER TRAP BY SPECIES
################
tsCode <- ts[,which(grepl("code|date|day|nTraps", colnames(ts)) &
grepl("site", colnames(ts)) == FALSE)]
par(mfrow=c(5,4))
par(mar=c(4,4,1,1))
par(oma=c(0,0,0,0))
for (i in unique(sort(raw.dat$code))[1:20]){
plot(tsCode$date,
tsCode[,paste0("code", i)]/ tsCode$nTraps,
type="l",
col=adjustcolor("red",alpha.f=0.4),
main=vec$name[which(vec$code == i)],
cex.axis=1,
cex.main=0.8,
xlab="Year",
ylab="Mosquitoes")
points(tsCode$date,
tsCode[,paste0("code",i)]/ tsCode$nTraps,
pch=16,
col=adjustcolor("red", alpha.f=0.4),
cex=0.5)
}
par(mfrow=c(5,4))
par(mar=c(4,4,1,1))
par(oma=c(0,0,0,0))
for (i in unique(sort(raw.dat$code))[21:33]){
plot(tsCode$date,
tsCode[,paste0("code", i)]/ tsCode$nTraps,
type="l",
col=adjustcolor("red",alpha.f=0.4),
main=vec$name[which(vec$code == i)],
cex.axis=1,
cex.main=0.8,
xlab="Year",
ylab="Mosquitoes")
points(tsCode$date,
tsCode[,paste0("code",i)]/ tsCode$nTraps,
pch=16,
col=adjustcolor("red", alpha.f=0.4),
cex=0.5)
}
#
# plot(x=tsCode$date,
#      y=log(tsCode$code2/
#        ts$nTraps),
#      type="n",
#      xlab="Day",
#      ylab="Mosquitoes",
#      ylim=c(0,7))
# for (i in colnames(tsCode[which(grepl("code", colnames(tsCode)))])){
#   lines(tsCode$date,
#         log(tsCode[,i]/ tsCode$nTraps),
#         col=adjustcolor("black", alpha.f=0.2))
#   text(x=tsCode$date[which(tsCode[,i]/tsCode$nTraps == max(tsCode[,i])/tsCode$nTraps)],
#        y=max(tsCode[,i]/tsCode$nTraps),
#        labels=id$name[which(id$code == as.numeric(gsub("code", "", i)))],
#        col=adjustcolor("black", alpha.f=0.2),
#        cex=0.8)
#   Sys.sleep(1)
# }
##############
# PLOT FOR EACH TRAP
##############
tsSite <- ts[,which(grepl("nTraps|day|date|site", colnames(ts)) &
grepl("code", colnames(ts))==FALSE)]
par(mfrow=c(5,2))
par(mar=c(4,4,2,1))
par(oma=c(0,0,0,0))
for (i in as.numeric(gsub("site", "",colnames(tsSite[which(grepl("site", colnames(tsSite)))])))){
plot(ts$date,
ts[,paste0("site", i)],
xlab="Year",
ylab="Mosquitoes",
main=loc$name[which(loc$Trap == i)],
col=adjustcolor("darkred", alpha.f=0.6),
pch=16,
cex=0.5)
lines(ts$date,
ts[,paste0("site", i)],
col=adjustcolor("darkred", alpha.f=0.6))
}
############
# MAP THE TRAPS
############
library(maps)
library(rJava)
library(OpenStreetMap)
library(rgdal)
library(maps)
library(RColorBrewer)
#Assorted colors for trap legend
#display.brewer.all()
trapclr <- brewer.pal(10, "Set3")
par(mfrow=c(1,1))
#SIMPLE
totPerSiteRecent <- as.numeric(unlist(master[which(master$date ==
recent),
colnames(master[which(grepl("site", colnames(master)) &
nchar(colnames(master)) < 7)])]))
totPerSiteNormal <- apply(master[which(master$date < recent),
colnames(master[which(grepl("site", colnames(master)) &
nchar(colnames(master)) < 7)])],
2,
sum)
#WATERCOLOR MAP
wcMap <- openmap(c(30, -82.65), c(29.4,-82.0),
type="stamen-watercolor")
wcMap <- openproj(wcMap, projection = "+proj=longlat")
plot(wcMap, raster=TRUE)
#plot(wcMap)
alachuacol <- NA
countycols <- rep(adjustcolor("black", alpha.f=0.2), 67)
countycols <- rep("white", 67)
map("county", "florida",
fill=TRUE,
col=c(alachuacol,countycols),
xlim=c(-82.75,-82),
ylim=c(29.4,30),
border=NA,
add=T)
#ADD TRAP POINTS
points(loc$long, loc$lat,
pch=16,
col=adjustcolor("darkred", alpha.f=0.6),
cex=totPerSite^(1/3))
# text(loc$long, loc$lat,
#      labels=loc$name,
#      col="darkgrey",
#      cex=totPerSite^(1/8)/3,
#      pos=3)
# legend(x="topright",
#        pch=16,
#        col=adjustcolor(trapclr, alpha.f=0.8),
#        legend=loc$name,
#        cex=0.5,
#        ncol=2,
#        bg=adjustcolor("black", alpha.f=0.1),
#        pt.cex=2)
#
# sabho <- openmap(c(40, -100), c(20, -80),
#                type="stamen-watercolor")
# plot(sabho)
##########################
# WNV MAP
##########################
par(mfrow=c(1,1))
countycols2 <- rep(adjustcolor("white", alpha.f=0.2), 67)
alachuacol2 <- adjustcolor("black", alpha.f=0.2)
map("county", "florida",
fill=TRUE,
col=c(alachuacol2,countycols2),
xlim=c(-82.75,-82),
ylim=c(29.4,30),
border=NA,
add=F)
temp <- master[,which(grepl("wnv" ,colnames(master)) & grepl("site", colnames(master)))]
temp <- as.data.frame(cbind(date=master$date, temp))
temp <- temp[which(temp$date == max(temp$date[which(is.na(temp$wnvsite1) == FALSE)])),]
temp <- as.numeric(temp[-1])
map("county", "florida",
fill=TRUE,
col=c(alachuacol2,countycols2),
xlim=c(-82.75,-82),
ylim=c(29.4,30),
border=NA,
add=F)
#ADD TRAP POINTS
points(loc$long, loc$lat,
pch=16,
col=adjustcolor("darkred", alpha.f=0.6),
cex=temp^(1/3))
#
DiseaseMapFun <- function(disease){
temp <- master[,which(grepl(disease ,colnames(master)) &
grepl("site", colnames(master)))]
temp <- as.data.frame(cbind(date=master$date, temp))
temp <- temp[which(temp$date ==
max(temp$date[which(is.na(temp[,paste0(disease, "site1")]) == FALSE)])),]
temp <- as.numeric(temp[-1])
map("county", "florida",
fill=TRUE,
col=c(alachuacol2,countycols2),
xlim=c(-82.75,-82),
ylim=c(29.4,30),
border=NA,
add=F)
title(main=toupper(disease), cex.main=0.8)
#ADD TRAP POINTS
points(loc$long, loc$lat,
pch=16,
col=adjustcolor("darkred", alpha.f=0.6),
cex=temp^(1/4))
legend(x="bottomleft",
pch=16,
col=adjustcolor("grey", alpha.f=0.6),
pt.cex=c(10, 50, 200)^(1/4),
legend=c(10,50,200), bty="n")
}
#PLOT DISEASE MAPS
par(mfrow=c(3,2))
par(mar=c(0,0,3,0))
par(oma=c(1,1,1,0))
DiseaseMapFun("wnv")
DiseaseMapFun("slev")
DiseaseMapFun("eeev")
DiseaseMapFun("dengue")
DiseaseMapFun("malaria")
DiseaseMapFun("chik")
#DiseaseMapFun("yellow")
############################
#######
# HISTOGRAMS OF HISTORICAL, OBSERVED, PREDICTED
########
library(arm)
bootRain <- rnorm(1000,
mean=coef(best)[1],
sd=se.coef(best)[1] *
sqrt(nrow(master[which(is.na(master$totPer) == FALSE),])))
bootRecent <- rnorm(1000,
mean=coef(best)[2],
sd=se.coef(best)[2] *
sqrt(nrow(master[which(is.na(master$totPer) == FALSE),])))
#Old way
#bootPred <- ((master$rain15.29[which(master$date == "2014-06-16")]^(2)*bootRain) +
#              (master$mostRecent[which(master$date == "2014-06-16")]*bootRecent))^(1/3)
#Experimental
bootPred <- ((mean(master$rain15.29[which(master$date > recent)], na.rm=T)^(2)*bootRain) +
(mean(master$mostRecent[which(master$date > recent)], na.rm=T)*bootRecent))^(1/3)
breakNum <- 20
histCols <- colorRampPalette(adjustcolor(c("darkgreen", "darkred"), alpha.f=0.5))(1+ breakNum)
nCols <- 30
col1 <- "darkgreen"
col2 <- "darkred"
alexCols <- colorRampPalette(c(col1, col2))(nCols)
#PLOT
myhist <-
hist(master$totPer[which(master$date < "2014-01-01")]^(1/3),
breaks=breakNum,
xlab="Mosquitoes per trap (2008-13)",
main=NA,
col=histCols,
border=NA,
xaxt="n",
freq=FALSE,
ylim=c(0,.4))
axis(side=1,
at=c(0, 100, 400, 1000, 1600)^(1/3),
labels=c(0, 100, 400, 1000, 1600))
abline(v=master$totPer[which(master$date == recent)]^(1/3),
col=adjustcolor("blue", alpha.f=0.2),
lwd=2)
# text(x= master$totPer[which(master$date == recent)]^(1/3),
#      y= max(myhist$density),
#      labels = "Most recent \n collection",
#      pos=4,
#      col=adjustcolor("blue", alpha.f=0.7))
# # HIST OF PREDICTIONS
# hist(bootPred,
#   col=adjustcolor("black", alpha.f=0.2), add=TRUE,
#   breaks=breakNum,
#   freq=FALSE,
#   border=NA)
# #LINE OF PREDICTIONS
hist(bootPred,
xaxt="n",
border=NA,
freq=FALSE,
main=NA,
xlab="Estimated mosquitoes per trap")
axis(side=1,
at=c(0, 100, 400, 1000, 1600)^(1/3),
labels=c(0, 100, 400, 1000, 1600))
lines(density(bootPred, adjust=2, na.rm=T),
lwd=3,
col=adjustcolor("darkred", alpha.f=0.4))
#LEGEND
legend("topright",
fill=c("darkgreen", NA, NA),
col=c(NA, adjustcolor("blue", alpha.f=0.4), "black"),
lty=c(NA, 1, 6),
lwd=c(NA, 2, 1),
legend=c("Historical observations",
"Most recent collection",
"2 week prediction"),
bty="n",
border=FALSE)
# # HIST OF PREDICTIONS
# hist(bootPred,
#   col=adjustcolor("black", alpha.f=0.2), add=TRUE,
#   breaks=breakNum,
#   freq=FALSE,
#   border=NA)
# #LINE OF PREDICTIONS
###################
# DISEASE PLOT
###################
DiseaseLinesFun <- function(color, disease){
temp <- master#[which(is.na(master[,i]) == FALSE),]
lines(temp$date, temp[,disease]^(1/3),
col=adjustcolor(color, alpha.f=0.3),
lwd=3)
#   points(master$date, master[,disease]^(1/3),
#          col=adjustcolor(color, alpha.f=0.5),
#          pch=16)
}
par(mar=c(5,4,2,1))
par(oma=c(1,1,1,1))
plot(master$date, master$wnv^(1/3), type="n",
yaxt="n",
xlab="Date",
ylab="Mosquitoes per trap",
ylim=c(0, max(master$wnv^(1/3), na.rm=TRUE)))
axis(side=2,
at=c(10, 100, 1000, 5000)^(1/3),
labels=c(10, 100, 1000, 5000))
DiseaseLinesFun("red", "wnv")
DiseaseLinesFun("darkgreen", "dengue")
DiseaseLinesFun("darkblue", "malaria")
DiseaseLinesFun("purple", "slev")
DiseaseLinesFun("brown", "eeev")
DiseaseLinesFun("darkorange", "chik")
DiseaseLinesFun("grey", "yellow")
legend(x="topleft",
col=adjustcolor(c("red", "darkgreen", "darkblue", "purple", "brown", "darkorange", "grey"), alpha.f=0.3),
lwd=3,
legend=c("WNV",
"Dengue",
"Malaria",
"SLEV",
"EEEV",
"Chikungunya",
"Yellow Fever"),
bty="n")
############
# SURFACE MAPS (SPATIAL INTERPOLATION)
############
library(gstat)
library(geoR)
library(rgdal)
library(scatterplot3d)
library(RColorBrewer)
# Read in Alachua Countyboundary
setwd("C:/Users/BrewJR/Documents/fdoh/public/mosquito")
boundary <- readOGR("Alachua_Boundary", "Alachua_Boundary")
# Source the code for surface maps
source("SurfaceFun.R")
par(mfrow=c(1,1))
suppressWarnings(SurfaceFun("wnv"))
suppressWarnings(SurfaceFun("dengue"))
suppressWarnings(SurfaceFun("malaria"))
suppressWarnings(SurfaceFun("slev"))
suppressWarnings(SurfaceFun("eeev"))
suppressWarnings(SurfaceFun("yellow"))
############
# SAVE IMAGE FOR REPORTS
############
save.image("C:/Users/BrewJR/Documents/fdoh/public/mosquito/reports/2014-10-14/master.RData")
#SHOW FORECAST
cbind(as.character(master$date[which(is.na(master$predicted) == FALSE)]),
master$totPer[which(is.na(master$predicted) == FALSE)],
master$predicted[which(is.na(master$predicted) == FALSE)],
master$lwr[which(is.na(master$predicted) == FALSE)],
master$upr[which(is.na(master$predicted) == FALSE)],
master$rain5.11[which(is.na(master$predicted) == FALSE)])
x <- data.frame("date" = master$date[which(is.na(master$predicted) == FALSE)],
"totPer" = master$totPer[which(is.na(master$predicted) == FALSE)],
"predicted" = master$predicted[which(is.na(master$predicted) == FALSE)],
"lwr" = master$lwr[which(is.na(master$predicted) == FALSE)],
"upr" = master$upr[which(is.na(master$predicted) == FALSE)],
"rain5.11" = master$rain5.11[which(is.na(master$predicted) == FALSE)])
x
# library(car)
# best.boot <- Boot(best, R=1999)
# summary(best.boot)
# confint(best.boot, level=0.8, type="norm")
# hist(best.boot)
# boot.ci(best.boot)
############
#
############
##########KNN
oldPreds <- master[which(master$date >= "2013-01-01" &
is.na(master$totPer) == FALSE),
c("totPer", "rain5.19", "predicted")]
myTrain <- master[which(master$date < "2013-01-01" &
is.na(master$totPer) == FALSE &
is.na(master$rain5.19) == FALSE),
c("totPer", "rain5.19")]
myTrain$totPerFac <- factor(myTrain$totPer)
myTest <- master[which(master$date >= "2013-01-01" &
is.na(master$totPer) == FALSE),
c("totPer", "rain5.19")]
myTest$totPerFac <- factor(myTest$totPer)
library("class")
z <-
knn(train = myTrain,
test = myTest,
cl = myTrain$totPerFac,
k=1,
prob=TRUE)
x <- as.numeric(as.character(z))
par(mfrow=c(1,1))
plot(myTest$totPer, x)
plot(1:nrow(myTest), myTest$totPer, type="l", col="red") #observed
lines(1:nrow(myTest), x, col="darkgreen") #predicted by knn
#lines(1:nrow(myTest), oldPreds$predicted, col="blue") #predicted by current model
#quantify difference
lm.knn <- lm(myTest$totPer ~ x)
lm.old <- lm(myTest$totPer ~ oldPreds$predicted)
sum(lm.old$residuals^2) - sum(lm.knn$residuals^2)
barplot(c(sum(lm.old$residuals^2),sum(lm.knn$residuals^2)),
names=c("old", "knn"))
#what about changing k?
plot(1:nrow(myTest), myTest$totPer, type="l", col="red") #observed
a <- as.data.frame(1:20)
colnames(a) <- "k"
a$r.squared <- NA
a$sls <- NA
for (i in a$k){
z <-
knn(train = myTrain,
test = myTest,
cl = myTrain$totPerFac,
k=i,
prob=TRUE)
x <- as.numeric(as.character(z))
a$r.squared[which(a$k == i)] <-
summary(lm(myTest$totPer~ x))$r.squared
a$sls[which(a$k == i)] <-
sum(lm(myTest$totPer ~ x)$residuals^2)
#lines(1:nrow(myTest), x, col="darkgreen") #predicted by knn
#Sys.sleep(0.5)
}
#k=1 produces best result
a <- a[order(a$sls),]
a
kmeans(myTrain[,1:2])
#Naive Bayes
library(e1071)
nB_model <- naiveBayes(totPer ~ rain15.29 + mostRecent, data=master)
summary(nB_model)
nB_model$apriori
save.image("C:/Users/BrewJR/Documents/fdoh/public/mosquito/reports/2014-11-07/master.RData")
save.image("C:/Users/BrewJR/Documents/fdoh/public/mosquito/reports/2014-11-07/master.RData")
cbind(as.character(master$date[which(is.na(master$predicted) == FALSE)]),
master$totPer[which(is.na(master$predicted) == FALSE)],
master$predicted[which(is.na(master$predicted) == FALSE)],
master$lwr[which(is.na(master$predicted) == FALSE)],
master$upr[which(is.na(master$predicted) == FALSE)],
master$rain5.11[which(is.na(master$predicted) == FALSE)])
x <- data.frame("date" = master$date[which(is.na(master$predicted) == FALSE)],
"totPer" = master$totPer[which(is.na(master$predicted) == FALSE)],
"predicted" = master$predicted[which(is.na(master$predicted) == FALSE)],
"lwr" = master$lwr[which(is.na(master$predicted) == FALSE)],
"upr" = master$upr[which(is.na(master$predicted) == FALSE)],
"rain5.11" = master$rain5.11[which(is.na(master$predicted) == FALSE)])
x
install.packages("gstat")
install.packages("geoR")
setwd("C:/Users/BrewJR/Documents/fdoh/public/mosquito")
boundary <- readOGR("Alachua_Boundary", "Alachua_Boundary")
# Source the code for surface maps
source("SurfaceFun.R")
par(mfrow=c(1,1))
save.image("C:/Users/BrewJR/Documents/fdoh/public/mosquito/reports/2014-11-07/master.RData")
x <- data.frame("date" = master$date[which(is.na(master$predicted) == FALSE)],
"totPer" = master$totPer[which(is.na(master$predicted) == FALSE)],
"predicted" = master$predicted[which(is.na(master$predicted) == FALSE)],
"lwr" = master$lwr[which(is.na(master$predicted) == FALSE)],
"upr" = master$upr[which(is.na(master$predicted) == FALSE)],
"rain5.11" = master$rain5.11[which(is.na(master$predicted) == FALSE)])
x
quantile(master$totPer)
quantile(master$totPer, na.rm = T)
quantile(master$totPer, na.rm = T, probs = seq(0,1, 0.01))
