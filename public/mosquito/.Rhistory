dat=data.frame(t=t, x=xt(t), y=yt(t))
with(dat, plot(x,y, type="l", xlim =c(-2,2), ylim =c(-2,2),
xlab = "", ylab = "", xaxt='n', yaxt='n'))
f1=jitter(sample(c(2,3),1));f2=jitter(sample(c(2,3),1));f3=jitter(sample(c(2,3),1));f4=jitter(sample(c(2,3),1))
d1=runif(1,0,1e-02);d2=runif(1,0,1e-02);d3=runif(1,0,1e-02);d4=runif(1,0,1e-02)
p1=runif(1,0,pi);p2=runif(1,0,pi);p3=runif(1,0,pi);p4=runif(1,0,pi)
xt = function(t) exp(-d1*t)*sin(t*f1+p1)+exp(-d2*t)*sin(t*f2+p2)
yt = function(t) exp(-d3*t)*sin(t*f3+p3)+exp(-d4*t)*sin(t*f4+p4)
t=seq(1, 100, by=.001)
dat=data.frame(t=t, x=xt(t), y=yt(t))
with(dat, plot(x,y, type="l", xlim =c(-2,2), ylim =c(-2,2),
xlab = "", ylab = "", xaxt='n', yaxt='n'))
f1=jitter(sample(c(2,3),1));f2=jitter(sample(c(2,3),1));f3=jitter(sample(c(2,3),1));f4=jitter(sample(c(2,3),1))
d1=runif(1,0,1e-02);d2=runif(1,0,1e-02);d3=runif(1,0,1e-02);d4=runif(1,0,1e-02)
p1=runif(1,0,pi);p2=runif(1,0,pi);p3=runif(1,0,pi);p4=runif(1,0,pi)
xt = function(t) exp(-d1*t)*sin(t*f1+p1)+exp(-d2*t)*sin(t*f2+p2)
yt = function(t) exp(-d3*t)*sin(t*f3+p3)+exp(-d4*t)*sin(t*f4+p4)
t=seq(1, 100, by=.001)
dat=data.frame(t=t, x=xt(t), y=yt(t))
with(dat, plot(x,y, type="l", xlim =c(-2,2), ylim =c(-2,2),
xlab = "", ylab = "", xaxt='n', yaxt='n'))
library(maps)
library(rJava)
library(OpenStreetMap)
library(rgdal)
library(maps)
library(RColorBrewer)
library(xtable)
library(splines)
####################
# LOAD MOST RECENT DATA
####################
load("C:/Users/BrewJR/Documents/fdoh/public/mosquito/reports/2014-10-14/master.RData")
library(gstat)
library(geoR)
disease <- "wnv"
install.packages("gstat")
install.packages("geoR")
temp <- master[,which(grepl(disease ,colnames(master)) &
grepl("site", colnames(master)))]
temp <- as.data.frame(cbind(date=master$date, temp))
temp <- temp[which(temp$date ==
max(temp$date[which(is.na(temp[,paste0(disease, "site1")]) == FALSE)])),]
temp <- as.numeric(temp[-1])
a <- data.frame("x" = loc$lon,
"y" = loc$lat,
"z" = temp)
library(gstat)
library(geoR)
spplot(a)
b <- as.geodata(a)
spplot(b)
b <- as.geodata(a)
prediction <- ksline(b, cov.model="exp", cov.pars=c(10,3.33), nugget=0,
locations=c(-82.15,29.323))
# Predict multiple points
x <- seq(-83, -82, by=0.01)
y <- seq(29,30, by=0.01)
xv <- rep(x,14)
yv <- rep(y, each=14)
in_mat <- as.matrix(cbind(xv,yv))
head(in_mat)
in_mat <- data.frame(in_mat)
names(in_mat)
names(in_mat) <- c("x", "y")
q <- ksline(b, cov.model="exp",cov.pars=c(10,3.33), nugget=0,
locations=in_mat)
q$predict
image(q, val=q$predict)
image(q)
in_mat <- as.geodata(in_mat)
a
b <- as.geodata(a)
plot(b)
head(b)
spplot(b)
?spplot
?ksline
q <- ksline(b, cov.model="exp",cov.pars=c(10,3.33), nugget=0,
head(in_mat)
q <- ksline(b, cov.model="exp",cov.pars=c(10,3.33), nugget=0,
locations=in_mat)
plot(q)
q
q$predict
image(q, val=q$predict)
image(as.matrix(q), val=q$predict)
as.matrix(q
)
q[,"sp.dim"]
q$prediction.locations
names(q)
q$locations
plot(q$locations)
image(q$locations)
image(q$locations, val=q$predict)
image(q$locations, val=q$predict)
warnings()
image(q$locations, as.matrix(q$predict))
q$locations
source('~/.active-rstudio-document', echo=TRUE)
heatmap(q)
heatmap(as.matrix(q))
as.matrix(q)
heatmap(as.matrix(q$locations))
?heatmap
?filled.contour
head(in_mat)
head(b)
b
a
filled.contour(a)
filled.contour(x= a$x,
y = a$y,
z = a$z)
a <- a[order(c(a$x, a$y)),]
a
a <- data.frame("x" = loc$lon,
"y" = loc$lat,
"z" = temp)
a <- a[with(aa, order(a$x, a$y)),]
a <- a[with(a, order(a$x, a$y)),]
filled.contour(x= a$x,
y = a$y,
z = a$z)
library(gstat)
library(geoR)
disease <- "wnv"
temp <- master[,which(grepl(disease ,colnames(master)) &
grepl("site", colnames(master)))]
load("C:/Users/BrewJR/Documents/fdoh/public/mosquito/reports/2014-10-14/master.RData")
disease <- "wnv"
temp <- master[,which(grepl(disease ,colnames(master)) &
grepl("site", colnames(master)))]
temp <- as.data.frame(cbind(date=master$date, temp))
temp <- temp[which(temp$date ==
max(temp$date[which(is.na(temp[,paste0(disease, "site1")]) == FALSE)])),]
temp <- as.numeric(temp[-1])
a <- data.frame("x" = loc$lon,
"y" = loc$lat,
"z" = temp)
b <- as.geodata(a)
prediction <- ksline(b, cov.model="exp", cov.pars=c(10,3.33), nugget=0,
locations=c(-82.15,29.323))
# Predict multiple points
x <- seq(-83, -82, by=0.01)
y <- seq(29,30, by=0.01)
xv <- rep(x,14)
yv <- rep(y, each=14)
head(in_mat)
in_mat
in_mat <- as.matrix(cbind(xv,yv))
head(in_mat)
heatmap(as.matrix(q$locations))
q <- ksline(b, cov.model="exp",cov.pars=c(10,3.33), nugget=0,
locations=in_mat)
filled.contour(in_mat, q$predict)
q$locations
x <- data.frame("x" = q$locations[,1],
"y" = q$locations[,2],
"predict" = q$predict)
filled.contour(list(x))
head(x)
image(x)
image(x)
xg <- as.geodata(x)
plot(xg)
image(xg)
image(xg, z= matrix(x$predit))
image(xg, z= matrix(x$predict))
?image
xg
head(x)
image(x = x, zcol = "z",
xcol = "x")
image(x = x$x,
y = x$y,
z = x$predict)
x <- x[order(x$x),]
head(x)
x <- x[rev(order(x$x)),]
head(x)
x <- x[with(x, order(x,y)),]
head(x)
x <- x[with(x, rev(order(x,y))),]
head(x)
image(x = seq(-83, -82, by=0.01),
y =  seq(29,30, by=0.01),
z = x$predict)
x$predict
q$predict
image(x = seq(-83, -82, by=0.01),
y =  seq(29,30, by=0.01),
z = matrix(x$predict))
image(x = seq(-83, -82, by=0.01),
y =  seq(29,30, by=0.01),
z = matrix(x$predict, ncol = length(seq(29,30, by=0.01)))
image(x = seq(-83, -82, by=0.01),
y =  seq(29,30, by=0.01),
z = matrix(x$predict, ncol = length(seq(29,30, by=0.01)))
)
levelplot(predict ~ x*y, data = x,
xlab = "X Coordinate (feet)", ylab = "Y Coordinate (feet)",
main = "Surface elevation data",
col.regions = terrain.colors(100)
)
library(lattice)
levelplot(predict ~ x*y, data = x,
xlab = "X Coordinate (feet)", ylab = "Y Coordinate (feet)",
main = "Surface elevation data",
col.regions = terrain.colors(100)
)
levelplot(predict ~ x*y, data = x,
xlab = "X Coordinate (feet)", ylab = "Y Coordinate (feet)",
main = "Surface elevation data",
col.regions = terrain.colors(500)
)
levelplot(predict ~ x*y, data = q,
xlab = "X Coordinate (feet)", ylab = "Y Coordinate (feet)",
main = "Surface elevation data",
col.regions = terrain.colors(500)
)
names(q)
q$predict
q$locations
levelplot(predict ~ locations, data = q,
xlab = "X Coordinate (feet)", ylab = "Y Coordinate (feet)",
main = "Surface elevation data",
col.regions = terrain.colors(500)
)
kc4 <- krige.conv(b, locations = in_mat,
krige = krige.control(obj.m=wls))
?krige.control
kc4 <- krige.conv(b, locations = in_mat,
krige = krige.control(obj.m=OK))
kc4 <- krige.conv(b, locations = in_mat,
krige = krige.control(type.krige = "ok"))
b$coords
b$data
kc4 <- krige.conv(geodata = b, coords = b$coords, data = b$data,
locations = in_mat,
# borders = ALACHUA BORDERS!,
krige = krige.control(type.krige = "ok"))
?krige.control
kc4 <- krige.conv(geodata = b, coords = b$coords, data = b$data,
locations = in_mat,
# borders = ALACHUA BORDERS!,
krige = krige.control(type.krige = "ok",
cov.pars = c(10, 3.33)))
mykrig <- krige.conv(geodata = b, coords = b$coords, data = b$data,
locations = in_mat,
# borders = ALACHUA BORDERS!,
krige = krige.control(type.krige = "ok",
cov.pars = c(10, 3.33)))
plot(mykrig)
image(mykrig)
mykrig$x
mykrig$predict
mykrig
mykrig$locations
names(mykrig)
summary(mykrig)
x
plot(b$coords)
plot(in_mat)
grd(in_mat)
library(scatterplot3d)
install.packages("scatterplot3d")
install.packages("scatterplot3d")
scatterplot3d(in_mat)
library(scatterplot3d)
scatterplot3d(in_mat)
summary(mykrig)
scatterplot3d(in_mat, mykrig$predict)
scatterplot3d(in_mat[,1], in_mat[,2], mykrig$predict)
scatterplot3d(in_mat[,1], in_mat[,2], mykrig$predict,
pch = 16, col = adjustcolor("black", alpha.f = 0.2))
scatterplot3d(in_mat[,1], in_mat[,2], mykrig$predict)
image(in_mat[,1], in_mat[,2], mykrig$predict)
head(inmat)
head(in_mat)
x <- seq(-83, -82, by=0.01)
y <- seq(29,30, by=0.01)
xv <- rep(x,each=14)
yv <- rep(y, 14)
in_mat <- as.matrix(cbind(xv,yv))
#   in_mat <- data.frame(in_mat)
#   names(in_mat) <- c("x", "y")
#   in_mat <- as.geodata(in_mat)
#
# Predict using kriging (another method)
mykrig <- krige.conv(geodata = b, coords = b$coords, data = b$data,
locations = in_mat,
# borders = ALACHUA BORDERS!,
krige = krige.control(type.krige = "ok",
cov.pars = c(10, 3.33)))
library(scatterplot3d)
scatterplot3d(in_mat[,1], in_mat[,2], mykrig$predict)
plot(in_mat[,1], in_mat[,2])
?grid
grid()
grid()
grid()
grid()
grid()
pred.grid <-  expand.grid(seq(-83,-82, l=51), seq(29,30, l=51))
kc <- krige.conv(geodata = b, coords = b$coords, data = b$data,
locations = pred.grid,
# borders = ALACHUA BORDERS!,
krige = krige.control(obj.m = ml))
kc <- krige.conv(geodata = b, coords = b$coords, data = b$data,
locations = pred.grid,
# borders = ALACHUA BORDERS!,
krige = krige.control(type.krige = "ok",
cov.pars = c(10, 3.33)))
image(kc, loc = pred.grid, col=gray(seq(1,0.1,l=30)), xlab="Coord X", ylab="Coord Y")
map("county", "fl", add = T)
mymap$polygons
mymap <- map("county","fl")
mymap$polygons
summary(mymap)
mymap$x[which(mymap$names == mymap$names[1])]
image(kc, loc = pred.grid, main = "predicted", col=gray(seq(1,0.1,l=30)))
image(kc, val ="variance", loc = pred.grid,
main = "prediction variance", col=gray(seq(1,0.1,l=30)))
image(kc, val = "simulation", number.col = 1, loc = pred.grid,
main = "a simulation from\nthe predictive distribution", col=gray(seq(1,0.1,l=30)))
image(kc, val = "simulation", number.col = 2,loc = pred.grid,
main = "another simulation from \n the predictive distribution", col=gray(seq(1,0.1,l=30)))
library(gstat)
library(geoR)
load("C:/Users/BrewJR/Documents/fdoh/public/mosquito/reports/2014-10-14/master.RData")
disease <- "wnv"
temp <- master[,which(grepl(disease ,colnames(master)) &
grepl("site", colnames(master)))]
temp <- as.data.frame(cbind(date=master$date, temp))
temp <- temp[which(temp$date ==
max(temp$date[which(is.na(temp[,paste0(disease, "site1")]) == FALSE)])),]
temp <- as.numeric(temp[-1])
a <- data.frame("x" = loc$lon,
"y" = loc$lat,
"z" = temp)
b <- as.geodata(a)
range(b)
names(b)
b$coords
b$coords$x
b$coords["x"]
x <- seq(-83, -82, by=0.01)
y <- seq(29,30, by=0.01)
xv <- rep(x,each=14)
yv <- rep(y, 14)
in_mat <- as.matrix(cbind(xv,yv))
mykrig <- krige.conv(geodata = b, coords = b$coords, data = b$data,
locations = in_mat,
# borders = ALACHUA BORDERS!,
krige = krige.control(type.krige = "ok",
cov.pars = c(10, 3.33)))
library(scatterplot3d)
scatterplot3d(in_mat[,1], in_mat[,2], mykrig$predict)
# defining the grid
pred.grid <-  expand.grid(seq(-83,-82, l=100), seq(29,30, l=100))
# kriging calculations
kc <- krige.conv(geodata = b, coords = b$coords, data = b$data,
locations = pred.grid,
# borders = ALACHUA BORDERS!,
krige = krige.control(type.krige = "ok",
cov.pars = c(10, 3.33)))
# displaying predicted values
image(kc, loc = pred.grid,
col = c("darkblue", "blue", "lightblue", "white", "pink", "red", "darkred"),
#col=gray(seq(1,0.1,l=100)),
xlab="Coord X", ylab="Coord Y")
library(maps)
map("county", "fl", add = T)
points(a$x, a$y)
image(kc, loc = pred.grid,
#col = c("darkblue", "blue", "lightblue", "white", "pink", "red", "darkred"),
col=gray(seq(1,0.1,l=100)),
xlab="Coord X", ylab="Coord Y")
library(maps)
map("county", "fl", add = T)
library(gstat)
library(geoR)
library(rgdal)
library(scatterplot3d)
library(RColorBrewer)
setwd("C:/Users/BrewJR/Documents/fdoh/public/mosquito")
# Define color vector
my_colors <- colorRampPalette(c("blue", "red"))(100)
SurfaceFun <- function(disease = "wnv",
boundary_shape = boundary,
col = NULL){
if(is.null(col)){
col <- colorRampPalette(c("blue", "red"))(100)
}
# getting coordinates of alachua boundary
boundary_points <- boundary@polygons[[1]]@Polygons
boundary_points <- boundary_points[[1]]@coords
# Getting the site counts in question for recent trapping
temp <- master[,which(grepl(disease ,colnames(master)) &
grepl("site", colnames(master)))]
temp <- as.data.frame(cbind(date=master$date, temp))
temp <- temp[which(temp$date ==
max(temp$date[which(is.na(temp[,paste0(disease, "site1")]) == FALSE)])),]
temp <- as.numeric(temp[-1])
# Get trap locations and data values
a <- data.frame("x" = loc$lon,
"y" = loc$lat,
"z" = temp)
# Make into a geodata object
b <- as.geodata(a)
# Predict multiple points in Alachua County's boundary
x <- seq(min(boundary_points[,1]), max(boundary_points[,1]), length = 100)
y <- seq(min(boundary_points[,2]), max(boundary_points[,2]), length = 100)
# Make a grid of those points
pred.grid <- expand.grid(x,y)
# kriging calculations
kc <- krige.conv(geodata = b, coords = b$coords, data = b$data,
locations = pred.grid,
borders = boundary_points,
#borders = boundary@polygons,
# borders = ALACHUA BORDERS!,
krige = krige.control(type.krige = "ok",
cov.pars = c(10, 3.33)))
# Plot!
# displaying predicted values
image(kc, loc = pred.grid,
col = col,
xlab=NA, ylab=NA,
xaxt = "n",
yaxt = "n",
xpd = NA,
bty = "n")
# Define percentiles for legend
legtemp <-  round(quantile(kc$predict, probs = seq(0,1,, length = 10)))
legend(x="topright",
fill = col[c(1,11,22,33,44,55,66,77,88,100)],
legend = c(legtemp[1], NA, NA, legtemp[4], NA, NA, legtemp[7], NA, NA, legtemp[10]),
border = FALSE,
bty = "n",
ncol = 1,
y.intersp = 0.5,
title = "Interpolation",
cex = 0.75)
}
#   #x <- seq(-83, -82, by=0.01)
#   #y <- seq(29,30, by=0.01)
#   xv <- rep(x,each=14)
#   yv <- rep(y, 14)
#   in_mat <- as.matrix(cbind(xv,yv))
#   in_mat <- data.frame(in_mat)
#   names(in_mat) <- c("x", "y")
#   in_mat <- as.geodata(in_mat)
#
#
#   # Predict using kriging (another method)
#   mykrig <- krige.conv(geodata = b, coords = b$coords, data = b$data,
#                        locations = in_mat,
#                        # borders = ALACHUA BORDERS!,
#                        krige = krige.control(type.krige = "ok",
#                                              cov.pars = c(10, 3.33)))
# defining the grid
#pred.grid <-  expand.grid(seq(-83,-82, l=100), seq(29,30, l=100))
# # display 3d scatterplot
# s3d <- scatterplot3d(pred.grid$Var1, pred.grid$Var2, kc$predict,
#                      color = adjustcolor("black", alpha.f = 0.5),
#                      box = FALSE,
#                      grid = FALSE,
#                      type = "p",
#                      pch = ".")
# # add some points for the traps
# s3d$points3d(x = a$x,
#              y = a$y,
#              z = temp)
#   # http://www.leg.ufpr.br/geoR/geoRdoc/geoRintro.html
#   kc2 <- krige.bayes(geodata = b, coords = b$coords, data = b$data,
#                      locations = pred.grid,
#                      borders = x, prior = prior.control(phi.discrete = seq(0,5,l=51)),
#                             output=output.control(n.predictive=2))
#   par(mfrow=c(2,2))
#   image(kc2, loc = pred.grid, main = "predicted", col=gray(seq(1,0.1,l=30)))
#   image(kc2, val ="variance", loc = pred.grid,
#         main = "prediction variance", col=gray(seq(1,0.1,l=30)))
#   image(kc2, val = "simulation", number.col = 1, loc = pred.grid,
#         main = "a simulation from\nthe predictive distribution", col=gray(seq(1,0.1,l=30)))
#   image(kc2, val = "simulation", number.col = 2,loc = pred.grid,
#         main = "another simulation from \n the predictive distribution", col=gray(seq(1,0.1,l=30)))
#   par(mfrow=c(1,1))
#
load("C:/Users/BrewJR/Documents/fdoh/public/mosquito/reports/2014-10-14/master.RData")
suppressWarnings(SurfaceFun("yellow"))
source("SurfaceFun.R")
par(mfrow=c(1,1))
suppressWarnings(SurfaceFun("wnv"))
?image
source("SurfaceFun.R")
par(mfrow=c(1,1))
suppressWarnings(SurfaceFun("wnv"))
source("SurfaceFun.R")
source("SurfaceFun.R")
par(mfrow=c(1,1))
suppressWarnings(SurfaceFun("wnv"))
par(mfrow=c(1,1))
par(mfrow=c(1,1))
source("SurfaceFun.R")
par(mfrow=c(1,1))
suppressWarnings(SurfaceFun("wnv"))
suppressWarnings(SurfaceFun("dengue"))
suppressWarnings(SurfaceFun("malaria"))
suppressWarnings(SurfaceFun("slev"))
save.image("C:/Users/BrewJR/Documents/fdoh/public/mosquito/reports/2014-10-14/master.RData")
